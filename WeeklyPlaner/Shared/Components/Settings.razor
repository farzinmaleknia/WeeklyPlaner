


<div class="modal fade" id="settingModal" tabindex="-1" aria-labelledby="settingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header just-bg-blue">
                <h1 class="modal-title fs-5" id="settingModalLabel">@(PersianPhrases.Setting)</h1>
                <button type="button" class="btn text-white m-right-auto" data-bs-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            </div>
            <div class="modal-body">
                <div class="d-flex justify-content-between mb-3">
                    <div class="f-size20">@(PersianPhrases.WeeksStartDay)</div>
                    <div>
                        <button class="btn my-bg-blue btn-sm dropdown-toggle meal-dropdown-btn mb-2" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="mx-1 f-size20">@(WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.Persian : PersianPhrases.ChooseDay)</span>
                        </button>
                        <ul class="dropdown-menu">
                            @if(WeeksList.Count > 0)
                            {
                                @foreach (var day in WeeksList[0].GetDays())
                                {
                                    <li><a class="dropdown-item d-flex justify-content-start f-size20" @onclick="() => passingDay(day)">@(day.Title)</a></li>
                                }
                            }
                        </ul>
                    </div>
                </div>
                <div class=" mb-3">
                    <div class="d-flex justify-content-between mb-1">
                        <div class=" f-size20 mb-1">@(PersianPhrases.GroceryListShare)</div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" @bind-value="IsForNextWeekGrocery" type="checkbox" role="switch" id="isNextWeek">
                            <label class="form-check-label  f-size20" for="isNextWeek">@(IsForNextWeekGrocery ? PersianPhrases.NextWeek : PersianPhrases.CurrentWeek)</label>
                        </div>
                    </div>
                    <div class="d-flex float-start">
                        <button class="btn my-bg-blue btn-sm mb-2" type="button" @onclick="OnShareGroceries" data-bs-toggle="modal" data-bs-target="#GeroceriesShareModal">
                            <span class="mx-1 f-size20">@(PersianPhrases.Share)</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Groceries Share Modal -->
<GroceriesShare Id="GeroceriesShareModal" GroceriesList="GroceriesList" />




@code {
    private PersianPhrases PersianPhrases = new PersianPhrases();

    [Parameter]
    public List<FoodCategory> FoodList { get; set; }

    [Parameter]
    public List<Week> WeeksList { get; set; }

    [Parameter]
    public Models Models { get; set; }

    [Parameter]
    public EventCallback<Models> OnModelsChangeModals { get; set; }

    [Parameter]
    public EventCallback<List<Week>> OnWeeksListChangeModals { get; set; }

    public List<Grocery> GroceriesList { get; set; }

    public bool IsForNextWeekGrocery { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsForNextWeekGrocery = false;

        GroceriesList = new List<Grocery>();
    }

    public List<Meal> GetBlankMeals()
    {
        List<Meal> list = new List<Meal>();

        if (Models.DayModel.Title != null)
        {
            list = WeeksList.FirstOrDefault(w => w.Id == Models.WeekId).GetDays().FirstOrDefault(d => d.Title == Models.DayModel.Title).GetMeals().Where(m => m.Food.Name == null && !m.IsMealPassed).ToList();
        }

        return list;
    }

    public async Task OnShareGroceries()
    {
        GroceriesList = new List<Grocery>();
        string week = IsForNextWeekGrocery ? PersianPhrases.NextWeek : PersianPhrases.CurrentWeek;

        foreach (var day in WeeksList.FirstOrDefault(w => w.Title == week).GetDays())
        {
            foreach (var meal in day.GetMeals())
            {
                if (meal.Groceries != null)
                {
                    GroceriesList.AddRange(meal.Groceries);
                }
            }
        }

        await OnModelsChangeSettingsModal();
    }

    public async Task passingDay(Day day)
    {
        Models.StartDay = new StartDay()
        {
            Persian = day.Title,
            English = day.TitleEn,
            IsStartDayChanged = true,
        };

        await OnModelsChangeSettingsModal();
    }





    public async Task OnFoodSelected(Food food)
    {
        Models.MealModel.Food = new Food()
        {
            Name = food.Name,
            Id = food.Id,
            CategoryId = food.CategoryId,
        };

        await OnModelsChangeSettingsModal();
    }

    public async Task OnFoodDiselected()
    {
        Models.MealModel.Food = new Food();
        Models.MealModel.Groceries = new List<Grocery>();
        await OnModelsChangeSettingsModal();
    }

    public async Task OnNewGroceryAdded(bool isSubmitNeeded = false)
    {
        if (Models.MealModel.Groceries == null)
            Models.MealModel.Groceries = new List<Grocery>();

        Models.MealModel.Groceries.Add(Models.GroceryModel);
        Models.GroceryModel = new Grocery();

        if (isSubmitNeeded)
        {
            OnNewGrocerySubmitet();
        }

        await OnModelsChangeSettingsModal();
    }

    public async Task OnNewGrocerySubmitet()
    {
        if (Models.MealModel.Groceries != null)
        {
            var meal = WeeksList.FirstOrDefault(w => w.Id == Models.WeekId).GetDays().FirstOrDefault(d => d.Title == Models.DayModel.Title).GetMeals().FirstOrDefault(m => m.Id == Models.MealModel.Id);
            meal.Groceries = Models.MealModel.Groceries;
        }
    }

    public async Task OnNewMealHandler()
    {
        var day = WeeksList.FirstOrDefault(w => w.Id == Models.WeekId).GetDays().FirstOrDefault(d => d.Title == Models.DayModel.Title);
        var meal = day.GetMeals().FirstOrDefault(m => m.Id == Models.MealModel.Id);

        meal.Food = Models.MealModel.Food;
        if (Models.MealModel.Groceries != null)
        {
            meal.Groceries = Models.MealModel.Groceries;
        }

        if(GetBlankMeals().Count() == 0)
        {
            day.IsCreateBtnNeeded = false;
        }

        await OnWeeksListChangeSettingsModal();
    }

    public async Task OnModelsChangeSettingsModal(Models models = null)
    {
        if (models != null)
            Models = models;
        await OnModelsChangeModals.InvokeAsync(Models);
    }

    public async Task OnWeeksListChangeSettingsModal(List<Week> weeksList = null)
    {
        if (weeksList != null)
            WeeksList = weeksList;
        await OnWeeksListChangeModals.InvokeAsync(WeeksList);
    }
}
