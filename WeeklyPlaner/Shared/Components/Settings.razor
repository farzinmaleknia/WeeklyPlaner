@inject IJSRuntime JSRuntime


<div class="modal fade" id="settingModal" tabindex="-1" aria-labelledby="settingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header just-bg-blue">
                <h1 class="modal-title fs-5" id="settingModalLabel">@(Language.Setting)</h1>
                <button type="button" class="btn text-white m-right-auto" data-bs-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            </div>
            <div class="modal-body">
                <div class="d-flex justify-content-between mb-3">
                    <div class="f-size20">@(Language.WeeksStartDay)</div>
                    <div>
                        <button class="btn my-bg-blue btn-sm dropdown-toggle meal-dropdown-btn mb-2" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="mx-1 f-size20">@(WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.Persian : Language.ChooseDay)</span>
                        </button>
                        <ul class="dropdown-menu">
                            @if(WeeksList.Count > 0)
                            {
                                @foreach (var day in WeeksList[0].GetDays())
                                {
                                    <li><a class="dropdown-item d-flex justify-content-start f-size20" @onclick="() => passingDay(day)">@(day.Title)</a></li>
                                }
                            }
                        </ul>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="d-flex justify-content-between mb-1">
                        <div class=" f-size20 mb-1 padding-l-40">@(Language.GroceryListShare)</div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" @bind-value="IsForNextWeekGrocery" type="checkbox" role="switch" id="isNextWeek">
                            <label class="form-check-label  f-size20" for="isNextWeek">@(IsForNextWeekGrocery ? Language.NextWeek : Language.CurrentWeek)</label>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button class="btn my-bg-blue btn-sm mb-2" type="button" @onclick="OnShareGroceries" data-bs-toggle="modal" data-bs-target="#GeroceriesShareModal">
                            <span class="mx-1 f-size20">@(Language.Share)</span>
                        </button>
                    </div>
                </div>
                <div class=" mb-3">
                    <div class="d-flex justify-content-between mb-1">
                        <div class=" f-size20 mb-1 padding-l-40">@(Language.WeekShare)</div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" @bind-value="IsForNextWeekShare" type="checkbox" role="switch" id="isNextWeekShare">
                            <label class="form-check-label  f-size20" for="isNextWeekShare">@(IsForNextWeekShare ? Language.NextWeek : Language.CurrentWeek)</label>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button class="btn my-bg-blue btn-sm mb-2" type="button" @onclick="OnShareWeek" >
                            <span class="mx-1 f-size20">@(Language.Share)</span>
                        </button>
                    </div>
                </div>
                <div class=" mb-3">
                    <div class="d-flex justify-content-between mb-1">
                        <div class=" f-size20 mb-1 padding-l-40">@(Language.WeekInsert)</div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" @bind-value="Models.IsForNextWeekInsert" type="checkbox" role="switch" id="isNextWeekInsert">
                            <label class="form-check-label  f-size20" for="isNextWeekInsert">@(Models.IsForNextWeekInsert ? Language.NextWeek : Language.CurrentWeek)</label>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button class="btn my-bg-blue btn-sm mb-2" type="button" data-bs-toggle="modal" data-bs-target="#WeekInserModal">
                            <span class="mx-1 f-size20">@(Language.Insert)</span>
                        </button>
                    </div>
                </div>
                <div class=" mb-3">
                    <div class="d-flex justify-content-between mb-1">
                        <div class=" f-size20 mb-1 padding-l-40">@(Language.WeeksClear)</div>
                        <button class="btn my-bg-blue btn-sm mb-2" type="button" @onclick="OnClearWeeks">
                            <span class="mx-1 f-size20">@(Language.Clear)</span>
                        </button>
                    </div>
                </div>
                <div class=" mb-3">
                    <div class="d-flex justify-content-between mb-1">
                        <div class=" f-size20 mb-1 padding-l-40">@(Language.FoodsClear)</div>
                        <button class="btn my-bg-blue btn-sm mb-2" type="button" @onclick="OnClearFoods">
                            <span class="mx-1 f-size20">@(Language.Clear)</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Groceries Share Modal -->
<ShareModal Id="GeroceriesShareModal">
    <Body>
        @if (GroceriesList.Count > 0)
        {
            @foreach (var groc in GroceriesList)
            {
                <div>
                    @($"{groc.Name} ({groc.Amount})")
                </div>
            }
        }
    </Body>
</ShareModal>


<!-- Groceries Share Modal -->
<InsertModal Id="WeekInserModal" Models="Models" OnWeekInserted="OnWeekInserted"/>





@code {

    [Parameter]
    public Language Language { get; set; }

    [Parameter]
    public List<FoodCategory> FoodList { get; set; }

    [Parameter]
    public List<Week> WeeksList { get; set; }

    [Parameter]
    public Models Models { get; set; }

    [Parameter]
    public EventCallback<Models> OnModelsChangeModals { get; set; }

    public List<Grocery> GroceriesList { get; set; }

    public bool IsForNextWeekGrocery { get; set; }

    public bool IsForNextWeekShare { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsForNextWeekGrocery = false;

        IsForNextWeekShare = false;

        GroceriesList = new List<Grocery>();
    }

    public async Task passingDay(Day day)
    {
        Models.StartDay = new StartDay()
        {
            Persian = day.Title,
            English = day.TitleEn,
            IsStartDayChanged = true,
        };

        await OnModelsChangeSettingsModal();
    }

    public async Task OnShareGroceries()
    {
        GroceriesList = new List<Grocery>();
        string week = IsForNextWeekGrocery ? Language.NextWeek : Language.CurrentWeek;

        foreach (var day in WeeksList.FirstOrDefault(w => w.Title == week).GetDays())
        {
            foreach (var meal in day.GetMeals())
            {
                if (meal.Groceries != null)
                {
                    GroceriesList.AddRange(meal.Groceries);
                }
            }
        }
    }

    public async Task OnShareWeek()
    {
        string selectedWeek = IsForNextWeekShare ? Language.NextWeek : Language.CurrentWeek;

        var week = WeeksList.FirstOrDefault(w => w.Title == selectedWeek); 

        if(week != null)
        {
            foreach (var day in week.GetDays())
            {
                day.IsDayPassed = false;
                day.IsDayBlank = false;
                day.IsDayCollapsed = false;
                day.IsCreateBtnNeeded = false;

                foreach (var meal in day.GetMeals())
                {
                    meal.IsMealCollapsed = false;
                    meal.IsMealPassed = false;
                }
            }

            var WeekString = Newtonsoft.Json.JsonConvert.SerializeObject(week);
            await JSRuntime.InvokeVoidAsync("onCopyFromString", WeekString);

        }

    }

    public async Task OnWeekInserted(string value)
    {
        Models.InsertedWeek = value;

        await OnModelsChangeSettingsModal();
    }

    public async Task OnClearWeeks()
    {
        Models.IsForWeeksClear = true;

        await OnModelsChangeSettingsModal();
    }

    public async Task OnClearFoods()
    {
        Models.IsForFoodsClear = true;

        await OnModelsChangeSettingsModal();
    }

    public async Task OnModelsChangeSettingsModal(Models models = null)
    {
        if (models != null)
            Models = models;
        await OnModelsChangeModals.InvokeAsync(Models);
    }
}
