@using WeeklyPlaner.Models


<div class="modal fade" id="@(Id)" tabindex="-1" aria-labelledby="@(Id)Label" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header just-bg-@(Color)">
                <h1 class="modal-title fs-5" id="@(Id)Label">@(Title)</h1>
                <button type="button" class="btn-close m-right-auto" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @(Body)
            </div>
            <div class="modal-footer">
                <button type="button" class="btn my-bg-@(Color)-outline bootstrap-buttons" data-bs-dismiss="modal" @onclick="() => OnValueChanged(false)">@(PersianPhrases.No)</button>
                <button class="btn my-bg-@(Color) bootstrap-buttons" data-bs-dismiss="modal" @onclick="() => OnValueChanged(true)">@(PersianPhrases.Yes)</button>
            </div>
        </div>
    </div>
</div>



@code {
    private PersianPhrases PersianPhrases = new PersianPhrases();

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment Body { get; set; }

    [Parameter]
    public string Color { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChangedEventHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task OnValueChanged(bool value)
    {
        await ValueChangedEventHandler.InvokeAsync(value);
    }
}
