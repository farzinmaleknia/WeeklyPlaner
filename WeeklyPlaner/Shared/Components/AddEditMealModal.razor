


<div class="modal fade" id="addEditMealModal" tabindex="-1" aria-labelledby="addEditMealModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header just-bg-@(Models.DayModel.color)">
                <h1 class="modal-title fs-5" id="addEditMealModalLabel">@(Models.IsForAddMeal ? Language.EnterNew(Language.Meal) : Language.ChangeThe(Language.Meal))</h1>
                <button type="button" class="btn text-white m-right-auto" data-bs-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            </div>
            <EditForm Model="Models.MealModel" OnSubmit="OnNewMealHandler">

                <div class="modal-body">
                    <div class="d-flex justify-content-between">
                        <div class="btn-group">
                            <button class="btn my-bg-@(Models.DayModel.color) btn-sm dropdown-toggle meal-dropdown-btn mb-2 @(!Models.IsForAddMeal ? "disabled" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @(Language.ChooseMeal)
                            </button>
                            <ul class="dropdown-menu">
                                @foreach (var meal in GetBlankMeals())
                                {
                                    <li><a class="dropdown-item d-flex justify-content-start" @onclick="() => passingMeal(meal)">@(meal.Title)</a></li>
                                }
                            </ul>
                        </div>
                        <div>
                            @if (Models.MealModel.Title != null)
                            {
                                <p class="f-size28">@(Models.MealModel.Title)</p>
                            }
                        </div>
                    </div>

                    <hr style="margin-top: 0;" />

                    @if (Models.MealModel.Food.Name == null)
                    {
                        <div class="modal-food-scrollable @(Models.MealModel.Title == null ? "my-disabled" : "")">
                            @foreach (var categorty in FoodList)
                            {
                                <div>
                                    <div class="mx-2 mt-3">
                                        <span>@(categorty.Title)</span>
                                    </div>
                                    <div>
                                        @foreach (var food in categorty.foods)
                                        {

                                            @if (!food.IsEatenRecently)
                                            {
                                                <button class="btn my-bg-@(Models.DayModel.color)-outline m-1 f-size18 " @onclick="() => OnFoodSelected(food)">@(food.Name)</button>
                                            }
                                        }
                                    </div>
                                </div>
                            }
                        </div>

                    }
                    else
                    {

                        <button class="btn my-bg-@(Models.DayModel.color) m-1 f-size24" @onclick="() => OnFoodDiselected()">
                            @(Models.MealModel.Food.Name)
                            <i class="fa fa-times f-size16 food-name-icon" aria-hidden="true"></i>
                        </button>

                        <hr />

                        <AddGrocery GroceryModel="Models.GroceryModel" Language="Language" IsSubmitNeeded="false" CurrentColor="@(Models.DayModel.color)" ValueChangedEventHandler="OnNewGroceryAdded" />

                        @if (Models.MealModel.Groceries != null)
                        {
                            <GroceriesList MealModel="Models.MealModel"/>
                        }
                    }
                </div>
                @if (Models.MealModel.Food.Name != null)
                {
                    <div class="modal-footer">
                        <button type="button" class="btn my-bg-@(Models.DayModel.color)-outline bootstrap-buttons" data-bs-dismiss="modal">@(Language.Cancle)</button>
                        <button type="submit" class="btn my-bg-@(Models.DayModel.color) bootstrap-buttons" data-bs-dismiss="modal">@(Language.Save)</button>
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>



@code {

    [Parameter, EditorRequired]
    public Language Language { get; set; }

    [Parameter]
    public List<FoodCategory> FoodList { get; set; }

    [Parameter]
    public List<Week> WeeksList { get; set; }

    [Parameter]
    public Models Models { get; set; }

    [Parameter]
    public EventCallback<Models> OnModelsChangeModals { get; set; }

    [Parameter]
    public EventCallback<List<Week>> OnWeeksListChangeModals { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public List<Meal> GetBlankMeals()
    {
        List<Meal> list = new List<Meal>();

        if (Models.DayModel.Title != null)
        {
            var daylist = WeeksList.FirstOrDefault(w => w.Id == Models.WeekId).GetDays();//.FirstOrDefault(d => d.Title == Models.DayModel.Title).GetMeals().Where(m => m.Food.Name == null && !m.IsMealPassed).ToList();
            list = daylist.FirstOrDefault(d => d.Title == Models.DayModel.Title).GetMeals().Where(m => m.Food.Name == null && !m.IsMealPassed).ToList();
        }

        return list;
    }

    public async Task passingMeal(Meal meal)
    {
        Models.MealModel = new Meal()
            {
                Id = meal.Id,
                Title = meal.Title,
            };

        await OnModelsChangeAddEditMealModal();
    }

    public async Task OnFoodSelected(Food food)
    {
        Models.MealModel.Food = new Food()
        {
            Name = food.Name,
            Id = food.Id,
            CategoryId = food.CategoryId,
        };

        await OnModelsChangeAddEditMealModal();
    }

    public async Task OnFoodDiselected()
    {
        Models.MealModel.Food = new Food();
        Models.MealModel.Groceries = new List<Grocery>();
        await OnModelsChangeAddEditMealModal();
    }

    public async Task OnNewGroceryAdded(bool isSubmitNeeded = false)
    {
        if (Models.MealModel.Groceries == null)
            Models.MealModel.Groceries = new List<Grocery>();

        Models.MealModel.Groceries.Add(Models.GroceryModel);
        Models.GroceryModel = new Grocery();

        if (isSubmitNeeded)
        {
            OnNewGrocerySubmitet();
        }

        await OnModelsChangeAddEditMealModal();
    }

    public async Task OnNewGrocerySubmitet()
    {
        if (Models.MealModel.Groceries != null)
        {
            var meal = WeeksList.FirstOrDefault(w => w.Id == Models.WeekId).GetDays().FirstOrDefault(d => d.Title == Models.DayModel.Title).GetMeals().FirstOrDefault(m => m.Id == Models.MealModel.Id);
            meal.Groceries = Models.MealModel.Groceries;
        }
    }

    public async Task OnNewMealHandler()
    {
        var day = WeeksList.FirstOrDefault(w => w.Id == Models.WeekId).GetDays().FirstOrDefault(d => d.Title == Models.DayModel.Title);
        var meal = day.GetMeals().FirstOrDefault(m => m.Id == Models.MealModel.Id);

        meal.Food = Models.MealModel.Food;
        if (Models.MealModel.Groceries != null)
        {
            meal.Groceries = Models.MealModel.Groceries;
        }

        if(GetBlankMeals().Count() == 0)
        {
            day.IsCreateBtnNeeded = false;
        }

        await OnWeeksListChangeAddEditMealModal();
    }

    public async Task OnModelsChangeAddEditMealModal(Models models = null)
    {
        if (models != null)
            Models = models;
        await OnModelsChangeModals.InvokeAsync(Models);
    }

    public async Task OnWeeksListChangeAddEditMealModal(List<Week> weeksList = null)
    {
        if (weeksList != null)
            WeeksList = weeksList;
        await OnWeeksListChangeModals.InvokeAsync(WeeksList);
    }
}
