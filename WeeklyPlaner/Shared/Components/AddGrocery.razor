

<EditForm Model="GroceryModel" OnSubmit="OnValueChanged">
	<div class="mb-1">
		<label for="groceryName" class="form-label">@(Language.NeededGrocery)</label>
		<InputText id="groceryName" class="form-control" Value="@GroceryModel.Name" ValueChanged="OnNameInputChanged" ValueExpression="() => GroceryModel.Name" />
	</div>
	<div class="mb-3 d-flex justify-content-between">
		<div>
			<label for="groceryAmount" class="form-label">@(Language.Amount)</label>
			<InputText id="groceryAmount" class="form-control" Value="@GroceryModel.Amount" ValueChanged="OnAmountInputChanged" ValueExpression="() => GroceryModel.Amount" />
		</div>
		<div>
			<button type="submit" class="btn my-bg-@(CurrentColor)-outline  grocery-add-btn  padding-t-10">
				<i class="fa fa-plus" aria-hidden="true"></i>
			</button>
		</div>
	</div>
</EditForm>

@code {

	[Parameter, EditorRequired]
	public Grocery GroceryModel { get; set; }

	[Parameter]
	public Language Language { get; set; } 

	[Parameter]
	public bool IsSubmitNeeded { get; set; } = false;

	[Parameter]
	public string CurrentColor { get; set; }

	[Parameter]
	public EventCallback<bool> ValueChangedEventHandler { get; set; }

	[Parameter]
	public EventCallback GroceryEditableHandler { get; set; }




	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

	}

	private async Task OnNameInputChanged(string value)
	{
		GroceryModel.Name = value;
		await GroceryEditableHandler.InvokeAsync();
	}

	private async Task OnAmountInputChanged(string value)
	{
		GroceryModel.Amount = value;
		await GroceryEditableHandler.InvokeAsync();
	}

	private async Task OnValueChanged()
	{
		await GroceryEditableHandler.InvokeAsync();
		await ValueChangedEventHandler.InvokeAsync(IsSubmitNeeded);
	}
}
