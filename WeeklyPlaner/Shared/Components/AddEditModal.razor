


<div class="modal fade" id="@(Id)" tabindex="-1" aria-labelledby="@(Id)Label" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header just-bg-blue">
                <h1 class="modal-title fs-5" id="@(Id)Label">@(IsForAdd ? PersianPhrases.EnterNew(Entity) : PersianPhrases.ChangeThe(Entity))</h1>
                <button type="button" class="btn text-white m-right-auto" data-bs-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            </div>
            <EditForm Model="Model" OnSubmit="OnValueChanged">
                <div class="modal-body">
                    @(Body)
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn my-bg-blue-outline bootstrap-buttons" data-bs-dismiss="modal">@(PersianPhrases.Cancle)</button>
                    @if (IsForAddMeal)
                    {
                        <button type="submit" class="btn my-bg-blue bootstrap-buttons">@(PersianPhrases.Save)</button>
                    }
                    else
                    {
                        <button type="submit" class="btn my-bg-blue bootstrap-buttons" data-bs-dismiss="modal">@(PersianPhrases.Save)</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    private PersianPhrases PersianPhrases = new PersianPhrases();

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Entity { get; set; }

    [Parameter]
    public object Model { get; set; }

    [Parameter]
    public RenderFragment Body { get; set; }

    [Parameter]
    public bool IsForAdd { get; set; }

    [Parameter]
    public bool IsForAddMeal { get; set; }

    [Parameter]
    public EventCallback ValueChangedEventHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsForAddMeal = false;
    }

    private async Task OnValueChanged()
    {
        await ValueChangedEventHandler.InvokeAsync();
    }
}
