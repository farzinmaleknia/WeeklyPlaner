
<div id="WeekCarousel" class="carousel slide mb-5">
    <div class="carousel-inner">

        @foreach (var week in WeeksList)
        {
            WeekCounter = 0;
            if (FirstRender)
            {
                ColorCounter = Random.Next(0, week.GetColors().Count());
                WeekColorCounter = Random.Next(0, week.GetColors().Count());
                while (WeekColorCounter == ColorCounter)
                {
                    WeekColorCounter = Random.Next(0, week.GetColors().Count());
                }

                FirstRender = false;
            }

            if(week.Color == string.Empty)
            {
                week.Color = $"{week.GetColors()[ColorCounter]}";
                week.HeaderColor = $"{week.GetColors()[ColorCounter]}";

                @if (ColorCounter < week.GetColors().Count() - 1)
                {
                    ColorCounter = ColorCounter + 1;
                }
                else
                {
                    ColorCounter = (ColorCounter + 1) - week.GetColors().Count();
                }

                @if (WeekColorCounter < week.GetColors().Count() - 1)
                {
                    WeekColorCounter = WeekColorCounter + 1;
                }
                else
                {
                    WeekColorCounter = (WeekColorCounter + 1) - week.GetColors().Count();
                }
            }

            <div class="carousel-item @(week.Title == PersianPhrases.CurrentWeek ? "active": "") col-12 padding-x-0">
                <div class="mb-3">
                    <div class="my-2 d-flex justify-content-between">
                        <button class="border-0" type="button" data-bs-target="#WeekCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>

                        <div class ="weeks-title just-bg-@(week.HeaderColor) text-center">
                            <span class=" f-size36 weeks-title">@(week.Title)</span>

@*                             <div class="carousel-indicators" style="position: relative; direction: initial;">
                                @foreach (var w in WeeksList)
                                {
                                    <button type="button" data-bs-target="#WeekCarousel" data-bs-slide-to="@(WeekCounter)" class="@(w.Title == PersianPhrases.ThreeWeeksAgo? "active" : "")" aria-label="Slide @(WeekCounter + 1)"></button>

                                    WeekCounter++;
                                }
                            </div> *@

                        </div>

                        <button class="border-0 " type="button" data-bs-target="#WeekCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon text-dark " aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                    </div>
                </div>

                @foreach (var day in week.GetDays())
                {
                    <Days Models="Models" Week="week" Day="day"  OnWeeksListChangeWeeks="OnWeeksListChangeWeeks" OnModelsChangeWeeks="OnModelsChangeWeeks"/>
                }
            </div>



        }
    </div>
</div>




@code {

    [Parameter]
    public Models Models { get; set; }

    [Parameter]
    public List<Week> WeeksList { get; set; }

    [Parameter]
    public EventCallback<Models> OnModelsChange { get; set; }

    [Parameter]
    public EventCallback<List<Week>> OnWeeksListChange { get; set; }

    public Random Random { get; set; }
    private PersianPhrases PersianPhrases = new PersianPhrases();


    public bool FirstRender { get; set; }

    public int ColorCounter { get; set; }

    public int WeekColorCounter { get; set; }

    public int WeekCounter { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        FirstRender = true;

        Random = new Random();

        WeekCounter = 0;
    }

    public async Task OnModelsChangeWeeks(Models models)
    {
        Models = models;
        await OnModelsChange.InvokeAsync(Models);
    }

    public async Task OnWeeksListChangeWeeks()
    {
        await OnWeeksListChange.InvokeAsync(WeeksList);
    }

}
