@inject IJSRuntime JSRuntime

<div class="card">
@*     @if (Meal.IsMealPassed)
    {
        <div class="meal-passed opacity-bg-@(Week.Color) f-size20">
            <div style="opacity: 1;">
                <button class="btn my-bg-@(Week.Color) btn-sm meal-collapse-btn" style="@(Language.SelectedLang == Language.Persian ? "left: 0": "right: 0")" data-bs-toggle="collapse" @onclick="() =>  OnCollapseMeal()" href="#@($"{Week.Id}{Day.Id}{Meal.Id}")" aria-expanded="true" aria-controls="@($"{Week.Id}{Day.Id}{Meal.Id}")">
                    <i class="fa fa-chevron-@(Meal.IsMealCollapsed ? Language.SelectedLang == Language.Persian ? "left": "right" : "down")" aria-hidden="true"></i>
                </button>

            </div>
        </div>
    } *@
    <div class="card-img-top bg-light days-img-top rounded border-0 d-flex justify-content-between">
        <span class="f-size36 meal-title" data-bs-toggle="collapse" @onclick="() =>  OnCollapseMeal()" href="#@($"{Week.Id}{Day.Id}{Meal.Id}")" aria-expanded="true" aria-controls="@($"{Week.Id}{Day.Id}{Meal.Id}")">
            @(Meal.Title)
            <i class="fa fa-chevron-@(Meal.IsMealCollapsed ? Language.SelectedLang == Language.Persian ? "left": "right"  : "down") " aria-hidden="true"></i>
        </span>
        @if (!Meal.IsMealPassed)
        {
            <button class="btn my-bg-@(Week.Color) btn-sm meal-del-btn" @onclick="() =>  passingData(false, Meal)" data-bs-toggle="modal" data-bs-target="#DelConfirmMealModal">
                <i class="fa fa-times" aria-hidden="true"></i>
            </button>            
        }
    </div>
    <div id="@($"{Week.Id}{Day.Id}{Meal.Id}")" class="collapse @(!Meal.IsMealCollapsed ? "show" : "")">
        <div class="card-body bg-light padding-t-5">
            <div class="row mx-auto">

                <FoodsList Language="Language" MealModel="Meal" Week="Week" Day="Day" Models="Models" WeekColor="@(Week.Color)" OnModelsChangeMeals="OnModelsChangeMeals" OnWeeksListChangeMeals="OnWeeksListChangeMeals" OnEditGeroceries="OnEditGeroceries" />

@*                 <div class="col padding-x-0 @(Meal.IsMealPassed ? "padding-b-40" : "")">
                    <button class="btn btn-sm my-bg-@(Week.Color)-outline m-auto width-98 bootstrap-buttons food-name f-size24 "
                            @onclick="() => passingData(false, Meal)"
                            data-bs-toggle="modal" data-bs-target="#addEditMealModal">
                        @(Meal.Food.Name)
                    </button>
                </div>
                @if(!Meal.IsMealPassed)
                {
                    <div class="col-2 padding-x-0">
                        <button class="btn btn-sm my-bg-@(Week.Color)-outline text-white m-auto width-98 grocery-btn"
                                @onclick="() => OnEditGeroceries()">
                            <i class="fa fa-cart-plus" aria-hidden="true"></i>
                        </button>
                    </div>                    
                } *@

                @if (Meal.IsMealPassed && !Meal.IsMealCollapsed)
                {
                    <div class="" style="">
                        <label for="isEatenRecently" class="form-check-label text-black f-size20">@(Language.DidYouEatIt)</label>
                        <input id="isEatenRecently" type="checkbox" class="form-check-input" @bind-value="@(Meal.IsFoodsEatenRecently)" @onclick="() => OnFoodEated()" checked="@(Meal.IsFoodsEatenRecently)" />
                    </div>
                    @if (Meal.IsFoodsEatenRecently)
                    {
                        <div class="" style="">
                            <span class="f-size18 text-black">@(Language.FoodWillEarase)</span>
                            <i class="fa fa-info margin-l-5 my-txt-@(Week.Color)" aria-hidden="true" data-bs-toggle="modal" data-bs-target="#FoodSectionRefresh"></i>
                        </div>
                    }
                }

                @if (Meal.GroceryEditable)
                {
                    if (!IsDataPassed)
                    {
                        passingData(false, Meal);
                        IsDataPassed = true;
                    }

                    <div class="col-12 mt-3 padding-x-0">
                        <AddGrocery GroceryModel="Models.GroceryModel" Language="Language" IsSubmitNeeded="true" CurrentColor="@(Week.Color)" ValueChangedEventHandler="OnNewGroceryAdded" GroceryEditableHandler="GroceryEditableHandler" />
                    </div>
                }


                @if (Meal.Groceries != null && !Meal.IsMealPassed)
                {
                    <div class="col-12 f-size18 padding-x-0 pt-3">
                            <GroceriesList MealModel="Meal" OnWeeksListChangeGeroceriesList="OnWeeksListChangeMeals" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>






@code {

    [Parameter, EditorRequired]
    public Language Language { get; set; }

    [Parameter]
    public Models Models { get; set; }

    [Parameter]
    public Meal Meal { get; set; }

    [Parameter]
    public Day Day { get; set; }

    [Parameter]
    public Week Week { get; set; }

    [Parameter]
    public EventCallback<Models> OnModelsChangeDays { get; set; }

    [Parameter]
    public EventCallback OnWeeksListChangeDays { get; set; }

    private Timer GroceryTimer { set; get; }

    public bool IsDataPassed { get; set; }

    public DateTime CurrentTime { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        GroceryTimer = new Timer(async _ =>
        {
            return;
        },null , 0 , 0);

        CurrentTime = DateTime.Now;

    } 


    public async Task passingData(bool isAddMeal, Meal? meal = null)
    {
        Models.WeekId = Week.Id;
        Models.DayModel = new Day(Language.SelectedLang)
        {
            Id = Day.Id,
            Title = Day.Title,    
            color = Week.Color,    
        };
        Models.IsForAddMeal = isAddMeal;

        if (Models.IsForAddMeal)
        {
            Models.MealModel = new Meal()
            {
                Id = meal.Id,
            };
            Models.GroceryModel = new Grocery();
        }
        else
        {
            Models.MealModel = new Meal()
            {
                Id = meal.Id,
                Title = meal.Title,
                Foods = new List<Food>(),
                Groceries = meal.Groceries != null ? new List<Grocery>(meal.Groceries) : null,
            };

            Models.MealModel.Foods.AddRange(meal.Foods);
        }

        await OnModelsChangeMeals();
    }

    private async Task OnCollapseMeal()
    {
        Meal.IsMealCollapsed = !Meal.IsMealCollapsed;

        await OnWeeksListChangeMeals();
    }

    private async void OnEditGeroceries()
    {
        GroceryEditableHandler();
        Meal.GroceryEditable = !Meal.GroceryEditable;
        IsDataPassed = !Meal.GroceryEditable;

    }

    private void GroceryEditableHandler()
    {
        GroceryTimer.Dispose();
        GroceryTimer = new System.Threading.Timer(async _ =>
        {
            Meal.GroceryEditable = false;
            await InvokeAsync(StateHasChanged);
            await OnWeeksListChangeMeals();

        }, null, 20000, 0);
    }


    public async Task OnNewGroceryAdded(bool isSubmitNeeded = false)
    {
        if (Models.MealModel.Groceries == null)
            Models.MealModel.Groceries = new List<Grocery>();

        Models.MealModel.Groceries.Add(Models.GroceryModel);
        Models.GroceryModel = new Grocery();

        await OnModelsChangeMeals();

        if (isSubmitNeeded)
        {
            OnNewGrocerySubmitet();
        }
    }

    public async Task OnNewGrocerySubmitet()
    {
        if (Models.MealModel.Groceries != null)
        {
            Meal.Groceries = Models.MealModel.Groceries;
            await OnWeeksListChangeMeals();
        }

    }

    public async Task OnFoodEated() 
    {
        Meal.IsFoodsEatenRecently = !Meal.IsFoodsEatenRecently;

        foreach (var food in Meal.Foods)
        {
            food.IsEatenRecently = Meal.IsFoodsEatenRecently;
            Models.FoodsModel.Add(new Food()
            {
                Name = food.Name,
                Id = food.Id,
                CategoryId = food.CategoryId,
                IsEatenRecently = food.IsEatenRecently,

            });
        }


        Models.IsFoodEatenChanged = true;
        Models.IsActionNeeded = true;

        await OnModelsChangeMeals();
        await OnWeeksListChangeMeals();

    }

    public async Task OnModelsChangeMeals()
    {
        await OnModelsChangeDays.InvokeAsync(Models);
    }

    public async Task OnWeeksListChangeMeals()
    {
        await OnWeeksListChangeDays.InvokeAsync();
    }

}
