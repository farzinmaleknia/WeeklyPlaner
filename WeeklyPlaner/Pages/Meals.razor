
<div class="card">

    <div class="card-img-top bg-light days-img-top rounded border-0 d-flex justify-content-between">
        <span class="f-size36 meal-title" data-bs-toggle="collapse" href="#dinnerBody" aria-expanded="true" aria-controls="dinnerBody">@(Meal.Title)</span>
        <button class="btn my-bg-@(Day.color) btn-sm meal-del-btn" @onclick="() =>  passingData(false, Meal)" data-bs-toggle="modal" data-bs-target="#DelConfirmMealModal">
            <i class="fa fa-times" aria-hidden="true"></i>
        </button>
    </div>
    <div id="dinnerBody" class="collapse show">
        <div class="card-body bg-light padding-t-5">
            <div class="row mx-auto">
                <div class="col-10 padding-x-0">
                    <button class="btn btn-sm my-bg-@(Day.color)-outline m-auto width-98 bootstrap-buttons food-name f-size24 "
                            @onclick="() => passingData(false, Meal)"
                            data-bs-toggle="modal" data-bs-target="#addEditMealModal">
                        @(Meal.Food.Name)
                    </button>
                </div>
                <div class="col-2 padding-x-0">
                    <button class="btn btn-sm my-bg-@(Day.color)-outline text-white m-auto width-98 grocery-btn"
                            @onclick="() => OnEditGeroceries(Meal)">
                        <i class="fa fa-cart-plus" aria-hidden="true"></i>
                    </button>
                </div>


                @if (Meal.GroceryEditable)
                {
                    if (!IsDataPassed)
                    {
                        passingData(false, Meal);
                        IsDataPassed = true;
                    }

                    <div class="col-12 mt-3 padding-x-0">
                        <AddGrocery GroceryModel="Models.GroceryModel" IsSubmitNeeded="true" CurrentColor="@(Day.color)" ValueChangedEventHandler="OnNewGroceryAdded" />
                    </div>
                }


                <div class="col-12 f-size18 padding-x-0 pt-3">
                    @if (Meal.Groceries != null)
                    {
                        <GroceriesList MealModel="Meal" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>






@code {

    [Parameter]
    public List<FoodCategory> FoodList { get; set; }

    [Parameter]
    public Models Models { get; set; }

    [Parameter]
    public Meal Meal { get; set; }

    [Parameter]
    public Day Day { get; set; }

    [Parameter]
    public Week Week { get; set; }

    [Parameter]
    public EventCallback<Models> OnModelsChangeDays { get; set; }

    private PersianPhrases PersianPhrases = new PersianPhrases();

    public bool IsDataPassed { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }



    public async Task passingData(bool isAddMeal, Meal? meal = null)
    {
        Models.WeekId = Week.Id;
        Models.DayModel = new Day()
        {
            Title = Day.Title,    
            color = Day.color,    
        };
        Models.IsForAddMeal = isAddMeal;

        if (Models.IsForAddMeal)
        {
            Models.MealModel = new Meal()
            {
                Id = meal.Id,
            };
            Models.GroceryModel = new Grocery();
        }
        else
        {
            Models.MealModel = new Meal()
            {
                Id = meal.Id,
                Title = meal.Title,
                Food = new Food(meal.Food.Name),
                Groceries = meal.Groceries != null ? new List<Grocery>(meal.Groceries) : null,
            };
        }

        await OnModelsChangeMeals();
    }

    private void OnEditGeroceries(Meal meal)
    {
        meal.GroceryEditable = !meal.GroceryEditable;
        IsDataPassed = !meal.GroceryEditable;
    }


    public async Task OnNewGroceryAdded(bool isSubmitNeeded = false)
    {
        if (Models.MealModel.Groceries == null)
            Models.MealModel.Groceries = new List<Grocery>
                ();

        Models.MealModel.Groceries.Add(Models.GroceryModel);
        Models.GroceryModel = new Grocery();

        if (isSubmitNeeded)
        {
            OnNewGrocerySubmitet();
        }

        await OnModelsChangeMeals();
    }

    public async Task OnNewGrocerySubmitet()
    {
        if (Models.MealModel.Groceries != null)
        {
            Meal.Groceries = Models.MealModel.Groceries;
        }

        await OnModelsChangeMeals();
    }

    public async Task OnModelsChangeMeals()
    {
        await OnModelsChangeDays.InvokeAsync(Models);
    }

}
