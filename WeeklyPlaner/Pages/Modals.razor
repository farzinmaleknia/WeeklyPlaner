<!-- Setting Modal -->
<Settings FoodList="FoodList" WeeksList="WeeksList" Models="Models" Language="Language" OnModelsChangeModals="OnModelsChangeModals" />

<!-- ADD/Edit meal Modal -->
<AddEditMealModal FoodList="FoodList" WeeksList="WeeksList" Models="Models" Language="Language" OnModelsChangeModals="OnModelsChangeModals" OnWeeksListChangeModals="OnWeeksListChangeModals" />

<!-- MealDeleteConfirmation Modal -->
<ConfirmationModal Id="DelConfirmMealModal" Title="@(Language.WarningByMark)" Language="Language" Color="@(Models.DayModel.color)" ValueChangedEventHandler="OnDeleteMeal">
    <Body>
        <span>
            @(Language.SureDeleteMeal(Models.MealModel.Food.Name, Models.MealModel.Title))
        </span>
    </Body>
</ConfirmationModal>

<!-- CategoryDeleteConfirmation Modal -->
<ConfirmationModal Id="DelConfirmCategoryModal" Title="@(Language.WarningByMark)" Language="Language" Color="blue" ValueChangedEventHandler="OnDeleteCategory">
    <Body>
        <span>@(Language.SureDelete(Language.Category, Models.CategoryModel.Title))</span>

    </Body>
</ConfirmationModal>

<!-- ADD/Edit Food -->
<AddEditModal Id="addEditFoodModal" Entity="@(Language.Food)" IsForAdd="true" Language="Language" IsForAddMeal="true" Model="Models.FoodModel" ValueChangedEventHandler="OnNewFoodSubmited">
    <Body>
        <label for="foodname" class="form-label">@(Language.Name)</label>
        <InputText id="foodname" class="form-control" @bind-Value=(Models.FoodModel.Name) />
    </Body>
</AddEditModal>

<!-- ADD/Edit Category -->
<AddEditModal Id="addEditCategoryModal" Entity="@(Language.Category)" Language="Language" IsForAdd="Models.IsForAddCat" Model="Models.CategoryModel" ValueChangedEventHandler="OnNewCategorySubmited">
    <Body>
        <label for="categoryname" class="form-label">@(Language.Name)</label>
        <InputText id="categoryname" class="form-control" @bind-Value=(Models.CategoryModel.Title) />
    </Body>
</AddEditModal>

<!-- FoodSectionRefresh -->
<InfoModal Language="Language" Id="FoodSectionRefresh">
    <Body>
        <div class="">
            <span class="">@(Language.WhyRemoveFood)</span>
        </div>
        <div class="">
            <span class="">@(Language.HowToRefreshFoodsList)</span>
        </div>
        <div class="d-flex justify-content-center mt-5">
            <i class="fa fa-undo my-txt-blue f-size36" aria-hidden="true"></i>
        </div>

    </Body>
</InfoModal>





@code {

    [Parameter, EditorRequired]
    public Language Language { get; set; }

    [Parameter]
    public List<Week> WeeksList { get; set; }

    [Parameter]
    public List<FoodCategory> FoodList { get; set; }

    [Parameter]
    public Models Models { get; set; }

    [Parameter]
    public EventCallback<Models> OnModelsChange { get; set; }

    [Parameter]
    public EventCallback<List<Week>> OnWeeksListChange { get; set; }

    [Parameter]
    public EventCallback<List<FoodCategory>> OnFoodListChange { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    public async Task OnDeleteMeal(bool value)
    {
        if (value)
        {
            var meal = WeeksList.FirstOrDefault(w => w.Id == Models.WeekId).GetDays().FirstOrDefault(d => d.Id == Models.DayModel.Id).GetMeals().FirstOrDefault(m => m.Id == Models.MealModel.Id);
            meal.Food = new Food();
            meal.Groceries = new List<Grocery>();

            await OnWeeksListChangeModals();
        }
    }


    public async Task OnDeleteCategory(bool value)
    {
        if (value)
        {
            var category = FoodList.FirstOrDefault(c => c.Id == Models.CategoryModel.Id);

            FoodList.Remove(category);

            Models.CategoryModel = new FoodCategory();

            OnFoodListChangeModals();
        }
    }

    public async Task OnNewFoodSubmited()
    {
        var category = FoodList.FirstOrDefault(c => c.Id == Models.CategoryModel.Id);
        Models.FoodModel.CategoryId = category.Id;

        category.foods.Add(Models.FoodModel);

        Models.FoodModel = new Food();

        OnFoodListChangeModals();
    }

    public async Task OnNewCategorySubmited()
    {
        if (Models.IsForAddCat)
        {
            FoodList.Add(new FoodCategory()
            {
                Title = Models.CategoryModel.Title,
            });

        }
        else
        {
            var category = FoodList.FirstOrDefault(c => c.Id == Models.CategoryModel.Id);
            category.Title = Models.CategoryModel.Title;
        }
        Models.CategoryModel = new FoodCategory();

        OnFoodListChangeModals();
    }

    public async Task OnModelsChangeModals(Models models = null)
    {
        if(models != null)
            Models = models;
        await OnModelsChange.InvokeAsync(Models);
    }

    public async Task OnWeeksListChangeModals(List<Week> weeksList = null)
    {
        if (weeksList != null)
            WeeksList = weeksList;
        await OnWeeksListChange.InvokeAsync(WeeksList);
    }

    public async Task OnFoodListChangeModals(List<FoodCategory> foodList = null)
    {
        if (foodList != null)
            FoodList = foodList;
        await OnFoodListChange.InvokeAsync(FoodList);
    }
}
