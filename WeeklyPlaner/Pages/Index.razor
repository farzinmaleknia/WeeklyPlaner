@page "/"

@inject IJSRuntime JSRuntime
@inject HttpClient http

<Header />

<div class="container-fluid">
    <div class="row bg-light-subtle">

        <Weeks Models="Models" WeeksList="WeeksList" OnWeeksListChange="OnWeeksListChange" OnModelsChange="OnModelsChange"/>

        <Foods FoodList="FoodList" Models="Models" OnFoodListChange="OnFoodListChange" OnModelsChange="OnModelsChange" />

        <button class="btn btn-warning" @onclick="onClearLocalStorage">clear</button>

    </div>
</div>

<Modals FoodList="FoodList" Models="Models" WeeksList="WeeksList" OnModelsChange="OnModelsChange" OnWeeksListChange="OnWeeksListChange" OnFoodListChange="OnFoodListChange" />




@code {
    private PersianPhrases PersianPhrases = new PersianPhrases();

    public Models Models { get; set; }

    public List<FoodCategory> FoodList { get; set; }

    public List<Week> WeeksList { get; set; }

    public DateTime CurrentTime { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Models = new Models();

        WeeksList = new List<Week>();

        FoodList = new List<FoodCategory>();

        CurrentTime = DateTime.Now;

        await BindData();

        // if(WeeksList.Count == 0)
        // {
        //     var responceWeekSampleData = await http.GetStringAsync("/sample-data/WeeksSampleData.json");

        //     WeeksList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Week>>(responceWeekSampleData);


        // }


        await ManageWeeksList();

        await IsMealPassed();

        if (FoodList.Count == 0)
        {

            var responce = await http.GetStringAsync("/sample-data/Foods.json");
            FoodList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FoodCategory>>(responce);


        }

        // foreach (var week in WeeksList)
        // {
        //     foreach (var day in week.GetDays())
        //     {
        //         foreach (var meal in day.GetMeals())
        //         {
        //             foreach (var cat in FoodList)
        //             {
        //                 var food = cat.foods.FirstOrDefault(f => f.Name == meal.Food.Name);
        //                 if(food != null)
        //                 {
        //                     meal.Food.CategoryId = food.CategoryId;
        //                     Console.WriteLine("yes");
        //                     break;
        //                 }
        //             }

        //         }
        //     }
        // }

        // foreach (var cat in FoodList)
        // {
        //     foreach (var food in cat.foods)
        //     {
        //         food.IsEatenRecently = false;
        //     }
        // }

    }

    private async Task ManageWeeksList()
    {
        CurrentTime = CurrentTime.AddDays(21);

        if (WeeksList.Count == 0 || (CurrentTime.Date - WeeksList[0].WeeksStartDay.Date.Date).TotalDays > 27)
        {
            WeeksList = new List<Week>();
            await AddNewWeek(FindStartDay(CurrentTime.AddDays(1), true).Result);
            await AddNewWeek(FindStartDay(CurrentTime).Result);
        }
        else
        {
            var nextStDay = FindStartDay(CurrentTime.AddDays(1), true).Result;
            var lastStDay = FindStartDay(CurrentTime.AddDays(0)).Result;

            if (nextStDay.Date != WeeksList[0].WeeksStartDay.Date.Date)
            {
                await AddNewWeek(nextStDay);
            }

            int weekCounter = 1;
            while (weekCounter < WeeksList.Count() && lastStDay.Date != WeeksList[weekCounter].WeeksStartDay.Date.Date)
            {
                await AddNewWeek(lastStDay);
                lastStDay = FindStartDay(lastStDay.AddDays(-1)).Result;
                weekCounter++;
            }

        }

    }

    private async Task<DateTime> FindStartDay(DateTime day, bool isNextStDay = false)
    {
        if (isNextStDay)
        {
            while (day.DayOfWeek.ToString() != (WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.English : Models.StartDay.English))
            {
                day = day.AddDays(1);
            }
        }
        else
        {
            while (day.DayOfWeek.ToString() != (WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.English : Models.StartDay.English))
            {
                day = day.AddDays(-1);
            }            
        }

        return day;
    }

    private async Task AddNewWeek(DateTime day)
    {
        WeeksList.Insert(0, new Week());

        WeeksList[0].WeeksStartDay.Date = day.Date;

        WeeksList = WeeksList.OrderByDescending(w => w.WeeksStartDay.Date.Date).ToList();

        if(WeeksList.Count() > 5)
        {
            WeeksList.RemoveAt(WeeksList.Count() - 1);
        }

        int weekTitle = 0;
        foreach (var week in WeeksList)
        {
            week.Title = week.GetWeeksTitle()[weekTitle];

            if (weekTitle < (WeeksList.Count() - 1))
                weekTitle++;
        }
    }

    private async Task IsMealPassed()
    {
        foreach (var week in WeeksList)
        {
            int dayOfWeek = 0;
            week.HeaderColor = string.Empty;
            week.Color = string.Empty;

            foreach (var day in week.GetDays())
            {
                foreach (var meal in day.GetMeals())
                {
                    meal.GroceryEditable = false;
                    if(meal.Food.IsEatenRecently)
                    {
                        meal.IsMealCollapsed = true;
                    }

                    //meal.Food.IsEatenRecently = false;
                    // meal.IsMealPassed = false;
                    // day.IsDayPassed = false;

                    if (week.Title == PersianPhrases.CurrentWeek)
                    {
                        int difference = (int)(CurrentTime - week.WeeksStartDay.Date).TotalDays;
                        if (difference > dayOfWeek)
                        {
                            meal.IsMealPassed = true;
                            day.IsDayPassed = true;
                        }
                        else if (difference == dayOfWeek)
                        {
                            if (meal.Title == PersianPhrases.Breakfast && CurrentTime.Hour > 10)
                            {
                                meal.IsMealPassed = true;
                            }
                            else if (meal.Title == PersianPhrases.Lunch && CurrentTime.Hour > 16)
                            {
                                meal.IsMealPassed = true;
                            }
                            else if (meal.Title == PersianPhrases.Dinner && CurrentTime.Hour > 21)
                            {
                                meal.IsMealPassed = true;
                                day.IsDayPassed = true;
                            }
                            else
                            {
                                meal.IsMealPassed = false;
                                day.IsDayPassed = false;
                            }
                        }
                        else
                        {
                            meal.IsMealPassed = false;
                            day.IsDayPassed = false;
                        }
                    }
                    else if (week.Title != PersianPhrases.NextWeek)
                    {
                        meal.IsMealPassed = true;
                        day.IsDayPassed = true;
                    }

                }

                if (!day.IsDayCollapsed)
                {
                    var list = day.GetMeals().Where(m => m.Food.Name == null).ToList();

                    if (list.Count == 3 && day.IsDayPassed)
                    {
                        day.IsDayCollapsed = true;
                        day.IsDayBlank = true;
                    }                    
                }

                dayOfWeek++;
            }
        }
    }

    public void IsDayBlank(Day day)
    {


    }

    public async Task onClearLocalStorage()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.clear");

        await ManageWeeksList();
    }

    public async Task BindData()
    {
        var responceWeek = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "WeeksList");
        if(responceWeek != null)
        {
            WeeksList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Week>>(responceWeek);
        }

        var responceFood = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "FoodList");
        if(responceFood != null)
        {
            FoodList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FoodCategory>>(responceFood);
        }

    }

    public async Task OnFoodIsEaten()
    {
        var food = FoodList.FirstOrDefault(c => c.Id == Models.FoodModel.CategoryId).foods.FirstOrDefault(f => f.Id == Models.FoodModel.Id);
        if(food != null)
        {
            food.IsEatenRecently = Models.FoodModel.IsEatenRecently;
        }

        Models.FoodModel = new Food();

        await OnFoodListChange();
    }

    public async Task OnStartDayChanged()
    {
        int forward = 0;

        while (WeeksList[0].GetDays().ToList()[forward].Title != Models.StartDay.Persian)
        {
            forward++;
        }

        foreach (var week in WeeksList)
        {
            week.WeeksStartDay.Date = week.WeeksStartDay.Date.AddDays(forward);
            week.WeeksStartDay.Persian = Models.StartDay.Persian;
            week.WeeksStartDay.English = Models.StartDay.English;
        }


        for (int week = WeeksList.Count - 1; week > -1; week--)
        {
            for (int day = 0; day < forward ; day++)
            {
                var dayIndex = 7 - (forward - day);

                if (week != 0)
                {
                    var theDay = WeeksList[week - 1].GetDays()[dayIndex];
                    var thisDay = WeeksList[week].GetDays()[dayIndex];
                    thisDay.Braekfast = theDay.Braekfast;
                    thisDay.Lunch = theDay.Lunch;
                    thisDay.Dinner = theDay.Dinner;

                }
                else
                {
                    var thisDay = WeeksList[week].GetDays()[dayIndex];
                    thisDay.Braekfast = new Meal();
                    thisDay.Lunch = new Meal();
                    thisDay.Dinner = new Meal();
                }




                //WeeksList[week].GetDays()[dayIndex] = WeeksList[week - 1] != null ? WeeksList[week - 1].GetDays()[dayIndex] : null;
            }
        }

        //await OnWeeksListChange();
        StateHasChanged();
    }


    public async Task OnModelsChange(Models models)
    {
        Models = models;

        if(Models.IsFoodEatenChanged)
        {
            await OnFoodIsEaten();

            Models.IsFoodEatenChanged = false;
        };

        if(Models.StartDay.IsStartDayChanged)
        {
            OnStartDayChanged();
        };
    }

    public async Task OnWeeksListChange(List<Week> list = null)
    {
        if(list != null)
            WeeksList = list;

        var WeeksListString = Newtonsoft.Json.JsonConvert.SerializeObject(WeeksList);
        //Console.WriteLine(WeeksListString);
        Console.WriteLine("--------------------- WeeksList Updated");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "WeeksList");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "WeeksList", WeeksListString);
    }

    public async Task OnFoodListChange(List<FoodCategory> list = null)
    {
        if(list != null)
            FoodList = list;

        var FoodListString = Newtonsoft.Json.JsonConvert.SerializeObject(FoodList);
        //Console.WriteLine(FoodListString);
        Console.WriteLine("--------------------- FoodList Updated");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "FoodList");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "FoodList", FoodListString);
    }
}
