@page "/"


<div class="container-fluid">
    <div class="row bg-light-subtle">

        <Weeks Models="Models" FoodList="FoodList" WeeksListIterable="WeeksListIterable" OnModelsChange="OnModelsChange"/>

        <div class="mb-3">
            <div class="mb-3">
                <span class=" f-size36 food-title just-bg-blue text-center">@(PersianPhrases.Foods)</span>
            </div>


            <button class="btn my-bg-blue new-meal-buttons mb-3" data-bs-toggle="modal" data-bs-target="#addEditCategoryModal" @onclick="() => passingCategory(true)">
                @(PersianPhrases.NewCategory)<i class="fa fa-plus f-size16 mx-1" aria-hidden="true"></i>
            </button>

            @foreach (var category in FoodList)
            {
                <div class="mb-5">
                    <div class="food-category-group d-flex justify-content-start">
                        <span class="category-title f-size24">@(category.Title)</span>
                        <button class="btn my-bg-blue-outline border-0" data-bs-toggle="modal" data-bs-target="#addEditFoodModal" @onclick="() => passingCategory(false, category)"><i class="fa fa-plus f-size16" aria-hidden="true"></i></button>
                        <button class="btn my-bg-blue-outline border-0" data-bs-toggle="modal" data-bs-target="#addEditCategoryModal" @onclick="() => passingCategory(false, category)"><i class="fa fa-pen f-size16" aria-hidden="true"></i></button>
                        <button class="btn my-bg-blue-outline border-0" data-bs-toggle="modal" data-bs-target="#DelConfirmCategoryModal" @onclick="() => passingCategory(false, category)"><i class="fa fa-minus f-size16" aria-hidden="true"></i></button>
                    </div>
                    <div>
                        @foreach (var food in category.foods)
                        {
                            <button class="btn my-bg-blue@(!food.IsSelectedForDel? "-outline" : "") m-1 f-size18" @onclick="() => OnFoodDelete(category, food)">
                                @(food.Name)
                                <i class="fa fa-times f-size16 food-name-icon @(!food.IsSelectedForDel ? "d-none" : "")" aria-hidden="true"></i>
                            </button>
                        }
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<Modals FoodList="FoodList" Models="Models" WeeksListIterable="WeeksListIterable" OnModelsChange="OnModelsChange" OnWeeksListChange="OnWeeksListChange" />




@code {
    private PersianPhrases PersianPhrases = new PersianPhrases();

    public Models Models { get; set; }

    public List<FoodCategory> FoodList { get; set; }

    public Week FirstWeek { get; set; }
    public Week SecondWeek { get; set; }
    public List<Week> WeeksList { get; set; }
    public IEnumerable<Week> WeeksListIterable { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Models = new Models();

        FirstWeek = new Week();
        WeeksList = new List<Week>();

        FoodList = new List<FoodCategory>();

        FirstWeek = new Week()
            {
                Id = 1,
                Title = PersianPhrases.CurrentWeek,
                Thursday = new Day()
                {
                    Title = PersianPhrases.Thursday,
                    Lunch = new Meal()
                    {
                        Title = PersianPhrases.Lunch,
                        Food = new Food("آبگوشت"),
                    },
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("قرمه"),
                        Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "پیاز",
                    Amount = "یک کیلو"
                },
                new Grocery()
                {
                    Name = "سیب زمینی",
                    Amount = "یک کیلو"
                },
                new Grocery()
                {
                    Name = "قارچ",
                    Amount = "نیم کیلو"
                }
            }
                    }
                },
                Friday = new Day()
                {
                    Title = PersianPhrases.Friday,
                    Braekfast = new Meal()
                    {
                        Title = PersianPhrases.Breakfast,
                        Food = new Food("حلیم"),

                    },
                    Lunch = new Meal()
                    {
                        Title = PersianPhrases.Lunch,
                        Food = new Food("ته چین"),
                        Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "مرغ",
                    Amount = "نیم کیلو"
                }
            }
                    },
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("سوپ ورمیشل"),
                        Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "قارچ",
                    Amount = "نیم کیلو"
                }
            }
                    }
                },
                Saturday = new Day()
                {
                    Title = PersianPhrases.Saturday,
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("کباب شامی"),
                        Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "سیب زمینی",
                    Amount = "ربع کیلو"
                }
            }
                    }
                },
                Sunday = new Day()
                {
                    Title = PersianPhrases.Sunday,

                },
                Monday = new Day()
                {
                    Title = PersianPhrases.Monday,
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("ماکارانی"),
                        Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "رب گوجه",
                    Amount = "یک شیشه"
                }
            }
                    }
                },
                Tuesday = new Day()
                {
                    Title = PersianPhrases.Tuesday,

                },
                Wednesday = new Day()
                {
                    Title = PersianPhrases.Wednesday,
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("الویه"),
                        Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "مایونز",
                    Amount = "یک شیشه"
                }
            }
                    }
                },
            };

        SecondWeek = new Week()
            {
                Id = 2,
                Title = PersianPhrases.LastWeek,
                Thursday = new Day()
                {
                    Title = PersianPhrases.Thursday,
                    Lunch = new Meal()
                    {
                        Title = PersianPhrases.Lunch,
                        Food = new Food("دیزی")
                    },
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("دو پیازه"),
                        Groceries = new List<Grocery>()
                    {
                        new Grocery()
                        {
                            Name = "پیاز",
                            Amount = "دو کیلو"
                        },
                        new Grocery()
                        {
                            Name = "سیب زمینی",
                            Amount = "دو کیلو"
                        },
                    }
                    }
                },
                Friday = new Day()
                {
                    Title = PersianPhrases.Friday,
                    Braekfast = new Meal()
                    {
                        Title = PersianPhrases.Breakfast,
                        Food = new Food("نان و پنیر"),
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "نان بربری کنجدی",
                        Amount = "دو عدد"
                    }
                }
                    },
                    Lunch = new Meal()
                    {
                        Title = PersianPhrases.Lunch,
                        Food = new Food("خوراک مرغ"),
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "مرغ",
                        Amount = "دو کیلو"
                    }
                }
                    },
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("سوپ مدیترانه"),
                        Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "قارچ",
                    Amount = "نیم کیلو"
                },
                new Grocery()
                {
                    Name = "زرشک",
                    Amount = "یک بسته"
                },
            }
                    }
                },
                Saturday = new Day()
                {
                    Title = PersianPhrases.Saturday,

                },
                Sunday = new Day()
                {
                    Title = PersianPhrases.Sunday,
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("خوراک لوبیا"),
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "لوبیا چیتی",
                        Amount = "یک بسته"
                    }
                }
                    }
                },
                Monday = new Day()
                {
                    Title = PersianPhrases.Monday,
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("سبزیجات با فیله"),
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "فیله",
                        Amount = "ربع کیلو"
                    }
                }
                    }
                },
                Tuesday = new Day()
                {
                    Title = PersianPhrases.Tuesday,
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("سبزیجات با فیله"),
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "فیله",
                        Amount = "ربع کیلو"
                    }
                }
                    }
                },
                Wednesday = new Day()
                {
                    Title = PersianPhrases.Wednesday,
                    Dinner = new Meal()
                    {
                        Title = PersianPhrases.Dinner,
                        Food = new Food("املت"),
                    }
                },
            };


        FoodList.AddRange(new List<FoodCategory>()
            {
                new FoodCategory(){ Title = PersianPhrases.Breakfast, foods = new List<Food>() { new Food("حلیم"), new Food("نان و پنیر"), new Food("صبحانه انگلیسی"), new Food("سوسیس تخم مرغ"), }, }, 
                new FoodCategory(){ Title = "غذاهای نونی", foods = new List<Food>() { new Food("آبگوشت"), new Food("کباب شامی"), new Food("الویه"), new Food("دیزی"), new Food("دو پیازه"), new Food("املت")} },
                new FoodCategory(){ Title= "غذاهای برنجی", foods = new List<Food>() { new Food("قرمه سبزی"), new Food("ته چین مرغ"), new Food("خوراک مرغ"), new Food("خورشت بامیه"), new Food("خورشت قیمه"), new Food("خورشت کرفس"), new Food("سبزی پلو با تن ماهی"), } },
                new FoodCategory(){ Title = "غذاهای حبوباتی", foods = new List<Food>() { new Food("لوبیا چیتی"), new Food("عدسی"), } },
                new FoodCategory(){ Title = "غذاهای نشاسته ای", foods = new List<Food>() { new Food("ماکارانی"), } },
                new FoodCategory(){ Title = "غذاهای سبزیجاتی", foods = new List<Food>() { new Food("سبزیجات با فیله"), new Food("سبزیجات با استیک"), } }, 
                new FoodCategory(){ Title = "غذاهای فوری", foods = new List<Food>() { new Food("ساندویچ مرغ"), new Food("ساندویچ تن ماهی و سیبزمینی"), new Food("بندری"), } },
                new FoodCategory(){ Title = "غذاهای کناری", foods = new List<Food>() { new Food("سوپ ورمیشل"), new Food("سوپ مدیترانه"), new Food("سالاد شیرازی"), new Food("سالاد فصل"), new Food("سالاد سزار"), new Food("سالاد تن ماهی"), new Food("سالاد تن پیاز"), } },
            }
        );

        foreach (var category in FoodList)
        {
            foreach (var food in category.GetFoods())
            {
                food.Category = category.Title;
            }
        }


        WeeksList.Add(FirstWeek);
        WeeksList.Add(SecondWeek);
        WeeksListIterable = WeeksList;

    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    // 	await base.OnAfterRenderAsync();
    // }

    public async Task passingCategory(bool isForAddCat, FoodCategory category = null )
    {
        if(isForAddCat)
        {
            Models.CategoryModel = new FoodCategory();

        }
        else
        {
            var lst = new List<Food>();
            lst.AddRange(category.foods);
            Models.CategoryModel = new FoodCategory()
            {
                Id = category.Id,
                Title = category.Title,

                foods = lst,
            };
        }
        Models.IsForAddCat = isForAddCat;
    }

    public async Task OnCategorySelected(string category)
    {
        Models.FoodModel.Category = category;
    }



    public async Task OnFoodDelete(FoodCategory category, Food food)
    {
        if(food.IsSelectedForDel)
        {
            category.foods.Remove(food);
            Models.FoodModel = new Food();
        }
        else
        {
            var lastCategory = FoodList.FirstOrDefault(c => c.Id == Models.CategoryModel.Id);
            if(lastCategory != null)
            {
                var lastFood = lastCategory.foods.FirstOrDefault(f => f.Name == Models.FoodModel.Name);
                if(lastFood != null)
                {
                    lastFood.IsSelectedForDel = false;
                }                
            }

            food.IsSelectedForDel = true;
            Models.FoodModel = new Food(food.Name);
            Models.CategoryModel = new FoodCategory()
            {
                Id = category.Id,
            };
        }
    }

    public void OnModelsChange(Models models)
    {
        Models = models;
    }

    public void OnWeeksListChange(IEnumerable<Week> list)
    {
        WeeksListIterable = list;
    }
}
