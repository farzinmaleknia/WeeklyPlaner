@page "/"

@inject IJSRuntime JSRuntime
@inject HttpClient http

<div id="body" dir="@(SelectedLang == Language.Persian? "rtl" : "ltr")">
    <Header Language="Language" />

    <div class="container-fluid">
        <div class="row bg-light-subtle">

            <Weeks Models="Models" WeeksList="WeeksList" Language="Language" OnWeeksListChange="OnWeeksListChange" OnModelsChange="OnModelsChange" />

            <Foods FoodList="FoodList" Models="Models" Language="Language" OnFoodListChange="OnFoodListChange" OnModelsChange="OnModelsChange" />

        </div>
    </div>

    <Modals FoodList="FoodList" Models="Models" WeeksList="WeeksList" Language="Language" OnModelsChange="OnModelsChange" OnWeeksListChange="OnWeeksListChange" OnFoodListChange="OnFoodListChange" />

</div>





@code {
    private PersianPhrases PersianPhrases = new PersianPhrases();
    private EnglishPhrases EnglishPhrases = new EnglishPhrases();

    private Language Language { get; set; }

    public string SelectedLang { get; set; }

    public Models Models { get; set; }

    public List<FoodCategory> FoodList { get; set; }

    public List<Week> WeeksList { get; set; }

    public DateTime CurrentTime { get; set; }

    private bool NeedToCollapse { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WeeksList = new List<Week>();

        FoodList = new List<FoodCategory>();

        CurrentTime = DateTime.Now;

        await SetNeedToCollapse();

        await BindData();

        if (SelectedLang == null || SelectedLang == string.Empty)
        {
            await OnSetLanguage(PersianPhrases.Persian);

        }

        Language = new Language(SelectedLang);

        Models = new Models(Language.SelectedLang);

        Models.StartDay = new StartDay()
        {
            Title = WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.Title: Language.Thursday,
            TitleEn = WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.TitleEn: EnglishPhrases.Thursday,
            TitleFa = WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.TitleFa: PersianPhrases.Thursday,
        };

        await ManageWeeksList();

        await FoodListRefresh();

        await IsMealPassed();

        if (FoodList.Count == 0)
        {
            await BindSampleFoodList();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await OnGridloaded();

    }


    private async Task SetNeedToCollapse()
    {
        var width = await JSRuntime.InvokeAsync<int>("getElementDimension");

        if (width != null && width < 774)
        {
            NeedToCollapse = true;
        }

    }


    private async Task OnSetLanguage(string lang = null)
    {
        if(lang == null)
        {
            SelectedLang = SelectedLang == PersianPhrases.Persian ? PersianPhrases.English : PersianPhrases.Persian;
        }
        else
        {
            SelectedLang = lang;
        }

        Language = new Language(SelectedLang);

        if(Models != null)
        {
            Models.DayModel.Title = SelectedLang == PersianPhrases.Persian ? Models.DayModel.TitleFa : Models.DayModel.TitleEn;
        }


        if(WeeksList.Count != 0)
        {
            foreach (var week in WeeksList)
            {
                week.Title = SelectedLang == PersianPhrases.Persian ? week.TitleFa : week.TitleEn;

                foreach (var day in week.GetDays())
                {
                    day.Title = SelectedLang == PersianPhrases.Persian ? day.TitleFa : day.TitleEn;

                    foreach (var meal in day.GetMeals())
                    {
                        meal.Title = SelectedLang == PersianPhrases.Persian ? meal.TitleFa : meal.TitleEn;
                    }
                }

                week.WeeksStartDay.Title = SelectedLang == PersianPhrases.Persian ? week.WeeksStartDay.TitleFa : week.WeeksStartDay.TitleEn;
            }

            await OnWeeksListChange();            
        }

        await OnSelectedLangChange();
    }

    private async Task FoodListRefresh()
    {
        foreach (var cat in FoodList)
        {
            foreach (var food in cat.foods)
            {
                food.IsSelectedForDel = false;
            }
        }

    }

    private async Task BindSampleFoodList()
    {
        var responce = await http.GetStringAsync("/sample-data/Foods.json");
        FoodList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FoodCategory>>(responce);

    }

    private async Task ManageWeeksList()
    {
        //CurrentTime = CurrentTime.AddDays(3);
        //Console.WriteLine(CurrentTime);

        if (WeeksList.Count == 0 || (CurrentTime.Date - WeeksList[0].WeeksStartDay.Date.Date).TotalDays > 27)
        {
            WeeksList = new List<Week>();
            await AddNewWeek(FindStartDay(CurrentTime.AddDays(1), true).Result);
            await AddNewWeek(FindStartDay(CurrentTime).Result);
        }
        else
        {
            var nextStDay = FindStartDay(CurrentTime.AddDays(1), true).Result;
            var lastStDay = FindStartDay(CurrentTime.AddDays(0)).Result;

            if (nextStDay.Date != WeeksList[0].WeeksStartDay.Date.Date)
            {
                await AddNewWeek(nextStDay);
            }

            int weekCounter = 1;
            while (weekCounter < WeeksList.Count() && lastStDay.Date != WeeksList[weekCounter].WeeksStartDay.Date.Date)
            {
                await AddNewWeek(lastStDay);
                lastStDay = FindStartDay(lastStDay.AddDays(-1)).Result;
                weekCounter++;
            }

        }

        await OnWeeksListChange();

    }

    private async Task<DateTime> FindStartDay(DateTime day, bool isNextStDay = false)
    {
        if (isNextStDay)
        {
            while (day.DayOfWeek.ToString() != (WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.TitleEn : Models.StartDay.TitleEn))
            {
                day = day.AddDays(1);
            }
        }
        else
        {
            while (day.DayOfWeek.ToString() != (WeeksList.Count > 0 ? WeeksList[0].WeeksStartDay.TitleEn : Models.StartDay.TitleEn))
            {
                day = day.AddDays(-1);
            }            
        }

        return day;
    }

    private async Task AddNewWeek(DateTime day)
    {
        WeeksList.Insert(0, new Week(Language.SelectedLang));

        WeeksList[0].WeeksStartDay.Date = day.Date;

        WeeksList = WeeksList.OrderByDescending(w => w.WeeksStartDay.Date.Date).ToList();

        if(WeeksList.Count() > 5)
        {
            WeeksList.RemoveAt(WeeksList.Count() - 1);
        }

        int weekTitle = 0;
        foreach (var week in WeeksList)
        {
            week.TitleFa = week.GetWeeksTitleFa()[weekTitle];
            week.TitleEn = week.GetWeeksTitleEn()[weekTitle];
            week.Title = SelectedLang == Language.Persian ? week.TitleFa : week.TitleEn;

            if (weekTitle < (WeeksList.Count() - 1))
                weekTitle++;
        }
    }

    private async Task InsertNewWeek(string insertedWeek)
    {

        Week week = Newtonsoft.Json.JsonConvert.DeserializeObject<Week>(insertedWeek);

        week.Title = Models.IsForNextWeek ? Language.NextWeek : Language.CurrentWeek;

        if (week.Id != null && (WeeksList[0].GetWeeksTitleFa().Contains(week.Title) || WeeksList[0].GetWeeksTitleEn().Contains(week.Title)))
        {
            week.WeeksStartDay = WeeksList.FirstOrDefault(w => w.Title == week.Title).WeeksStartDay;

            WeeksList = WeeksList.Where(w => w.Title != week.Title).ToList();

            WeeksList.Add(week);

            WeeksList = WeeksList.OrderByDescending(w => w.WeeksStartDay.Date.Date).ToList();

            await IsMealPassed();

            await OnWeeksListChange();            
        }

    }

    private async Task InsertNewFoodList(string insertedFoodlist)
    {
        List<FoodCategory> foodlist = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FoodCategory>>(insertedFoodlist);

        if (foodlist.Count > 0)
        {
            FoodList.AddRange(foodlist);
        }
    }

    private async Task IsMealPassed()
    {
        foreach (var week in WeeksList)
        {
            int dayOfWeek = 0;
            week.HeaderColor = string.Empty;
            week.Color = string.Empty;

            foreach (var day in week.GetDays())
            {
                foreach (var meal in day.GetMeals())
                {
                    meal.GroceryEditable = false;
                    meal.IsMealCollapsed = false;
                    if(meal.IsFoodsEatenRecently && NeedToCollapse)
                    {
                        meal.IsMealCollapsed = true;
                    }

                    //meal.Food.IsEatenRecently = false;
                    // meal.IsMealPassed = false;
                    // day.IsDayPassed = false;

                    if (week.Title == Language.CurrentWeek)
                    {
                        int difference = (int)(CurrentTime - week.WeeksStartDay.Date).TotalDays;
                        if (difference > dayOfWeek)
                        {
                            meal.IsMealPassed = true;
                            day.IsDayPassed = true;
                        }
                        else if (difference == dayOfWeek)
                        {
                            if (meal.Title == Language.Breakfast && CurrentTime.Hour > 10)
                            {
                                meal.IsMealPassed = true;
                            }
                            else if (meal.Title == Language.Lunch && CurrentTime.Hour > 16)
                            {
                                meal.IsMealPassed = true;
                            }
                            else if (meal.Title == Language.Dinner && CurrentTime.Hour > 21)
                            {
                                meal.IsMealPassed = true;
                                day.IsDayPassed = true;
                            }
                            else
                            {
                                meal.IsMealPassed = false;
                                day.IsDayPassed = false;
                            }
                        }
                        else
                        {
                            meal.IsMealPassed = false;
                            day.IsDayPassed = false;
                        }
                    }
                    else if (week.Title != Language.NextWeek)
                    {
                        meal.IsMealPassed = true;
                        day.IsDayPassed = true;
                    }

                }

                day.IsDayCollapsed = false;

                var list = day.GetMeals().Where(m => m.Foods.Count == 0).ToList();

                if (list.Count == 3 && day.IsDayPassed)
                {
                    if(NeedToCollapse)
                    {
                        day.IsDayCollapsed = true;
                    }
                    day.IsDayBlank = true;
                }      

                dayOfWeek++;
            }
        }
    }

    public async Task BindData()
    {
        var selectedLang = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "SelectedLang");
        if (selectedLang != null)
        {
            SelectedLang = selectedLang;
        }

        var responceWeek = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "WeeksList");
        if(responceWeek != null)
        {
            WeeksList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Week>>(responceWeek);
        }

        var responceFood = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "FoodList");
        if(responceFood != null)
        {
            FoodList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FoodCategory>>(responceFood);
        }

    }

    public async Task OnFoodIsEaten()
    {
        foreach (var food in Models.FoodsModel)
        {
            var finalFood = FoodList.FirstOrDefault(c => c.Id == food.CategoryId).foods.FirstOrDefault(f => f.Id == food.Id);
            if (finalFood != null)
            {
                finalFood.IsEatenRecently = food.IsEatenRecently;
            }            
        }

        Models.FoodsModel = new List<Food>();

        await OnFoodListChange();
    }

    public async Task OnStartDayChanged()
    {
        int forward = 0;

        while (WeeksList[0].GetDays().ToList()[forward].Title != Models.StartDay.Title)
        {
            forward++;
        }

        foreach (var week in WeeksList)
        {
            week.WeeksStartDay.Date = week.WeeksStartDay.Date.AddDays(forward);
            week.WeeksStartDay.Title = Models.StartDay.Title;
            week.WeeksStartDay.TitleFa = Models.StartDay.TitleFa;
            week.WeeksStartDay.TitleEn = Models.StartDay.TitleEn;
        }


        for (int week = WeeksList.Count - 1; week > -1; week--)
        {
            for (int day = 0; day < forward ; day++)
            {
                var dayIndex = 7 - (forward - day);

                if (week != 0)
                {
                    var theDay = WeeksList[week - 1].GetDays()[dayIndex];
                    var targetDay = WeeksList[week].GetDays()[dayIndex];
                    targetDay.Braekfast = theDay.Braekfast;
                    targetDay.Lunch = theDay.Lunch;
                    targetDay.Dinner = theDay.Dinner;
                    targetDay.IsCreateBtnNeeded = theDay.IsCreateBtnNeeded;
                    targetDay.IsDayBlank = theDay.IsDayBlank;
                    targetDay.IsDayCollapsed = theDay.IsDayCollapsed;
                    targetDay.IsDayPassed = theDay.IsDayPassed;

                }
                else
                {
                    var targetDayNextWeek = WeeksList[week].GetDays()[dayIndex];
                    targetDayNextWeek.Braekfast = new Meal(){ TitleFa = PersianPhrases.Breakfast, TitleEn = EnglishPhrases.Breakfast, Title = SelectedLang == PersianPhrases.Persian? PersianPhrases.Breakfast : EnglishPhrases.Breakfast, }; 
                    targetDayNextWeek.Lunch = new Meal() { TitleFa = PersianPhrases.Lunch, TitleEn = EnglishPhrases.Lunch, Title = SelectedLang == PersianPhrases.Persian ? PersianPhrases.Lunch : EnglishPhrases.Lunch, };
                    targetDayNextWeek.Dinner = new Meal() { TitleFa = PersianPhrases.Dinner, TitleEn = EnglishPhrases.Dinner, Title = SelectedLang == PersianPhrases.Persian ? PersianPhrases.Dinner : EnglishPhrases.Dinner, };
                    targetDayNextWeek.IsCreateBtnNeeded = false;
                    targetDayNextWeek.IsDayBlank = false;
                    targetDayNextWeek.IsDayCollapsed = false;
                    targetDayNextWeek.IsDayPassed = false;
                }




                //WeeksList[week].GetDays()[dayIndex] = WeeksList[week - 1] != null ? WeeksList[week - 1].GetDays()[dayIndex] : null;
            }
        }

        await OnWeeksListChange();
        StateHasChanged();
    }

    public async Task OnGridloaded()
    {
        await JSRuntime.InvokeVoidAsync("resizeAllGridItems");
    }

    public async Task onClearWeeksList()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "WeeksList");

        WeeksList = new List<Week>();

        Models.StartDay = new StartDay()
        {
            TitleFa = PersianPhrases.Thursday,
            TitleEn = EnglishPhrases.Thursday,
            Title = Language.Thursday,
        };

        await ManageWeeksList();

        await IsMealPassed();

    }

    public async Task onClearFoodsList()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "FoodList");

        FoodList = new List<FoodCategory>();

    }

    // public async Task onClearLocalStorage()
    // {
    //     await JSRuntime.InvokeVoidAsync("localStorage.clear");

    //     // await OnSetLanguage(Language.Persian);

    //     // await ManageWeeksList();

    //     // await IsMealPassed();

    //     // FoodList = new List<FoodCategory>();
    // }


    public async Task OnModelsChange(Models models)
    {
        Models = models;

        if(Models.IsActionNeeded)
        {
            if(Models.IsFoodEatenChanged)
            {
                await OnFoodIsEaten();

                Models.IsFoodEatenChanged = false;
            };

            if(Models.StartDay.IsStartDayChanged)
            {
                OnStartDayChanged();

                Models.StartDay.IsStartDayChanged = false;
            };

            if (Models.InsertedWeek != null && Models.InsertedWeek != string.Empty)
            {
                await InsertNewWeek(Models.InsertedWeek);

                Models.InsertedWeek = string.Empty;
            };

            if (Models.InsertedFoodList != null && Models.InsertedFoodList != string.Empty)
            {
                await InsertNewFoodList(Models.InsertedFoodList);

                Models.InsertedFoodList = string.Empty;
            };

            if(Models.IsForWeeksClear)
            {
                await onClearWeeksList();

                Models.IsForWeeksClear = false;
            };

            if(Models.IsForFoodsClear)
            {
                await onClearFoodsList();

                Models.IsForFoodsClear = false;
            };

            if(Models.IsForChangeLanguage)
            {
                await OnSetLanguage();

                Models.IsForChangeLanguage = false;
            };

            Models.IsActionNeeded = false;
        }
    }

    public async Task OnSelectedLangChange(string lang = null)
    {
        if(lang != null)
            SelectedLang = lang;

        Console.WriteLine("--------------------- SelectedLang Updated");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "SelectedLang");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "SelectedLang", SelectedLang);
    }

    public async Task OnWeeksListChange(List<Week> list = null)
    {
        await OnGridloaded();
        if(list != null)
            WeeksList = list;

        var WeeksListString = Newtonsoft.Json.JsonConvert.SerializeObject(WeeksList);
        //Console.WriteLine(WeeksListString);
        Console.WriteLine("--------------------- WeeksList Updated");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "WeeksList");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "WeeksList", WeeksListString);
    }

    public async Task OnFoodListChange(List<FoodCategory> list = null)
    {
        if(list != null)
            FoodList = list;

        var FoodListString = Newtonsoft.Json.JsonConvert.SerializeObject(FoodList);
        //Console.WriteLine(FoodListString);
        Console.WriteLine("--------------------- FoodList Updated");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "FoodList");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "FoodList", FoodListString);
    }
}
