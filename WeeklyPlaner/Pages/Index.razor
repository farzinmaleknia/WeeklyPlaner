@page "/"

@using WeeklyPlaner.Models
@using WeeklyPlaner.Shared.Components

<div class="container-fluid">
    <div class="row bg-light-subtle">

        <div id="WeekCarousel" class="carousel slide">
            <div class="carousel-inner">

                @foreach (var week in WeeksListIterable)
                {
                    if (FirstRender)
                    {
                        ColorCounter = Random.Next(0, week.Colors.Count());
                        FirstRender = false;
                    }

                    <div class="carousel-item @(week.Title == "هفته کنونی"? "active" : "") col-12 padding-x-0">
                        <div class="mb-3 text-center">
                            <div class="my-2 d-flex justify-content-between">
                                <button class="border-0  " type="button" data-bs-target="#WeekCarousel" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>

                                <span class=" f-size36 weeks-title just-bg-@(week.Colors[Random.Next(0, week.Colors.Count())])">@(week.Title)</span>

                                <button class="border-0 " type="button" data-bs-target="#WeekCarousel" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon text-dark " aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                            </div>

                                @foreach (var day in week.GetDays())
                                {
                                    day.color = week.Colors[ColorCounter];
                                    bool isCreateBtnNeeded = false;

                                    <div class="col-12  padding-x-0">
                                        <div class="card days">
                                        <span class="card-img-top just-bg-@(day.color) text-center f-size36 days-title  my-sticky">@(day.Title)</span>
                                            <div class="card-body padding-x-0">
                                                <div class="list-group list-group-flush">
                                                    <div class="list-group-item padding-x-0">
                                                        @foreach (var meal in day.GetMeals())
                                                        {
                                                            if (meal.FoodName != null)
                                                            {
                                                                <div class="card">
                                                                    <div class="card-img-top bg-light days-img-top rounded border-0 d-flex justify-content-between">
                                                                        <span class="f-size36 meal-title" data-bs-toggle="collapse" href="#dinnerBody" aria-expanded="true" aria-controls="dinnerBody">@(meal.Title)</span>
                                                                        <button class="btn my-bg-@(day.color) btn-sm meal-del-btn" @onclick="() =>  passingData(week.Id, day, false, meal)" data-bs-toggle="modal" data-bs-target="#DelConfirmMealModal">
                                                                            <i class="fa fa-times" aria-hidden="true"></i>
                                                                        </button>
                                                                    </div>
                                                                    <div id="dinnerBody" class="collapse show">
                                                                        <div class="card-body bg-light">
                                                                            <div class="row mx-auto">
                                                                                <div class="col-10 padding-x-0">
                                                                                    <button class="btn btn-sm my-bg-@(day.color)-outline m-auto width-98 bootstrap-buttons food-name f-size28 "
                                                                                            @onclick="() => passingData(week.Id, day, false, meal)"
                                                                                            data-bs-toggle="modal" data-bs-target="#addEditMealModal">
                                                                                        @(meal.FoodName)
                                                                                    </button>
                                                                                </div>
                                                                                <div class="col-2 padding-x-0">
                                                                                    <button class="btn btn-sm my-bg-@(day.color)-outline text-white m-auto width-98 grocery-btn"
                                                                                            @onclick="() => OnEditGeroceries(meal)">
                                                                                        <i class="fa fa-cart-plus" aria-hidden="true"></i>
                                                                                    </button>
                                                                                </div>


                                                                                @if (meal.GroceryEditable)
                                                                                {
                                                                                    if (!IsDataPassed)
                                                                                    {
                                                                                        passingData(week.Id, day, false, meal);
                                                                                        IsDataPassed = true;
                                                                                    }

                                                                                    <div class="col-12 mt-3">
                                                                                        <AddGrocery GroceryModel="GroceryModel" IsSubmitNeeded="true" CurrentColor="@(CurrentColor)" ValueChangedEventHandler="OnNewGroceryAdded" />
                                                                                    </div>
                                                                                }


                                                                                <div class="col-12 f-size18 pt-3">
                                                                                    @if (meal.Groceries != null)
                                                                                    {
                                                                                        <GroceriesList MealModel="meal" />
                                                                                    }
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                isCreateBtnNeeded = true;
                                                            }
                                                        }
                                                    </div>
                                                </div>

                                                @if (isCreateBtnNeeded)
                                                {
                                                    <div class="d-flex justify-content-center">
                                                        <button class="btn my-bg-@(day.color) new-meal-buttons" data-bs-toggle="modal" data-bs-target="#addEditMealModal" @onclick="() => passingData(week.Id, day, true)">
                                                            وعده جدید
                                                        </button>
                                                    </div>
                                                }


                                            </div>
                                        </div>
                                    </div>


                                    if (ColorCounter < week.Colors.Count() - 1)
                                    {
                                        ColorCounter = ColorCounter + 1;
                                    }
                                    else
                                    {
                                        ColorCounter = (ColorCounter + 1) - week.Colors.Count();
                                    }
                                }
                        </div>
                    </div>

                }


            </div>
        </div>
    </div>
</div>


<!-- ADD/Edit Modal -->
<div class="modal fade" id="addEditMealModal" tabindex="-1" aria-labelledby="addEditMealModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header just-bg-@(CurrentColor)">
                <h1 class="modal-title fs-5" id="addEditMealModalLabel">@(IsForAdd ? "وعده جدید رو وارد کن" : "وعده رو تغییر بده")</h1>
                <button type="button" class="btn text-white m-right-auto" data-bs-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            </div>
            <EditForm Model="MealModel" OnSubmit="OnNewMealSubmitet">

                <div class="modal-body">
                    <div class="d-flex justify-content-between">
                        <div class="btn-group">

                            <button class="btn my-bg-@(CurrentColor) btn-sm dropdown-toggle meal-dropdown-btn mb-2 @(!IsForAdd ? "disabled" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                انتخاب وعده
                            </button>


                            <ul class="dropdown-menu">
                                @foreach (var meal in GetBlankMeals())
                                {
                                    <li><a class="dropdown-item" @onclick="() => passingMeal(meal)">@(meal.Title)</a></li>
                                }
                            </ul>
                        </div>
                        <div>
                            @if (MealModel.Title != null)
                            {
                                <p class="f-size28">@(MealModel.Title)</p>
                            }

                        </div>
                    </div>
                    <hr style="margin-top: 0;" />
                    <div class="mb-3">
                        <label for="foodName" class="form-label">نام غذا</label>
                        <InputText id="foodName" class="form-control" @bind-Value="MealModel.FoodName" />
                    </div>
                    <hr />

                    <AddGrocery GroceryModel="GroceryModel" IsSubmitNeeded="false" CurrentColor="@(CurrentColor)" ValueChangedEventHandler="OnNewGroceryAdded" />

                    @if (MealModel.Groceries != null)
                    {
                        <GroceriesList MealModel="MealModel" />
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn my-bg-@(CurrentColor)-outline bootstrap-buttons" data-bs-dismiss="modal">انصراف</button>
                    <button type="submit" class="btn my-bg-@(CurrentColor) bootstrap-buttons" data-bs-dismiss="modal">ثبت</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>

<!-- DeleteConfirmation Modal -->
<div class="modal fade" id="DelConfirmMealModal" tabindex="-1" aria-labelledby="DelConfirmMealModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header just-bg-@(CurrentColor)">
                <h1 class="modal-title fs-5" id="DelConfirmMealModalLabel">هشدار!</h1>
                <button type="button" class="btn-close m-right-auto" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <span>آیا از حذف @(MealModel.FoodName) به عنوان @(MealModel.Title) مطمئن هستید؟</span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn my-bg-@(CurrentColor)-outline bootstrap-buttons" data-bs-dismiss="modal">خیر</button>
                <button class="btn my-bg-@(CurrentColor) bootstrap-buttons" data-bs-dismiss="modal" @onclick="OnDeleteMeal">بلی</button>
            </div>
        </div>
    </div>
</div>



@code {
    public Week FirstWeek { get; set; }
    public Week SecondWeek { get; set; }
    public List<Week> WeeksList { get; set; }
    public IEnumerable<Week> WeeksListIterable { get; set; }

    public int WeekId { get; set; }

    public string DayModelTitle { get; set; }

    public Meal MealModel { get; set; }

    public Grocery GroceryModel { get; set; }

    public bool IsDataPassed { get; set; }

    public int ColorCounter { get; set; }

    public string CurrentColor { get; set; }

    public bool FirstRender { get; set; }

    public Random Random { get; set; }

    public bool IsForAdd { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        FirstWeek = new Week();
        WeeksList = new List<Week>();
        WeeksListIterable = new List<Week>();

        MealModel = new Meal();

        FirstRender = true;

        Random = new Random();

        GroceryModel = new Grocery();

        IsDataPassed = false;


        FirstWeek = new Week()
            {
                Id = 1,
                Title = "هفته کنونی",
                Thursday = new Day()
                {
                    Title = "پنج‌شنبه",
                    Lunch = new Meal()
                    {
                        Title = "ناهار",
                        FoodName = "آبگوشت",
                    },
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "قورمه",
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "پیاز",
                        Amount = "یک کیلو"
                    },
                    new Grocery()
                    {
                        Name = "سیب زمینی",
                        Amount = "یک کیلو"
                    },
                    new Grocery()
                    {
                        Name = "قارچ",
                        Amount = "نیم کیلو"
                    }
                }
                    }
                },
                Friday = new Day()
                {
                    Title = "جمعه",
                    Braekfast = new Meal()
                    {
                        Title = "صبحانه",
                        FoodName = "حلیم",

                    },
                    Lunch = new Meal()
                    {
                        Title = "ناهار",
                        FoodName = "ته چین",
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "مرغ",
                        Amount = "نیم کیلو"
                    }
                }
                    },
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "سوپ ورمیشل",
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "قارچ",
                        Amount = "نیم کیلو"
                    }
                }
                    }
                },
                Saturday = new Day()
                {
                    Title = "شنبه",
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "کباب شامی",
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "سیب زمینی",
                        Amount = "ربع کیلو"
                    }
                }
                    }
                },
                Sunday = new Day()
                {
                    Title = "یکشنبه",

                },
                Monday = new Day()
                {
                    Title = "دوشنبه",
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "ماکارانی",
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "رب گوجه",
                        Amount = "یک شیشه"
                    }
                }
                    }
                },
                Tuesday = new Day()
                {
                    Title = "سه‌شنبه",

                },
                Wednesday = new Day()
                {
                    Title = "چهار‌شنبه",
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "الویه",
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "مایونز",
                        Amount = "یک شیشه"
                    }
                }
                    }
                },
            };


        SecondWeek = new Week()
            {
                Id = 2,
                Title = "هفته قبل",
                Thursday = new Day()
                {
                    Title = "پنج‌شنبه",
                    Lunch = new Meal()
                    {
                        Title = "ناهار",
                        FoodName = "دیزی",
                    },
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "دو پیازه",
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "پیاز",
                        Amount = "دو کیلو"
                    },
                    new Grocery()
                    {
                        Name = "سیب زمینی",
                        Amount = "دو کیلو"
                    },
                }
                    }
                },
                Friday = new Day()
                {
                    Title = "جمعه",
                    Braekfast = new Meal()
                    {
                        Title = "صبحانه",
                        FoodName = "نان و پنیر",
                        Groceries = new List<Grocery>()
                    {
                        new Grocery()
                        {
                            Name = "نان بربری کنجدی",
                            Amount = "دو عدد"
                        }
                    }
                    },
                    Lunch = new Meal()
                    {
                        Title = "ناهار",
                        FoodName = "خوراک مرغ",
                        Groceries = new List<Grocery>()
                    {
                        new Grocery()
                        {
                            Name = "مرغ",
                            Amount = "دو کیلو"
                        }
                    }
                    },
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "سوپ مدیترانه",
                        Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "قارچ",
                        Amount = "نیم کیلو"
                    },
                    new Grocery()
                    {
                        Name = "زرشک",
                        Amount = "یک بسته"
                    },
                }
                    }
                },
                Saturday = new Day()
                {
                    Title = "شنبه",

                },
                Sunday = new Day()
                {
                    Title = "یکشنبه",
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "خوراک لوبیا",
                        Groceries = new List<Grocery>()
                    {
                        new Grocery()
                        {
                            Name = "لوبیا چیتی",
                            Amount = "یک بسته"
                        }
                    }
                    }
                },
                Monday = new Day()
                {
                    Title = "دوشنبه",
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "سبزیجات با فیله",
                        Groceries = new List<Grocery>()
                    {
                        new Grocery()
                        {
                            Name = "فیله",
                            Amount = "ربع کیلو"
                        }
                    }
                    }
                },
                Tuesday = new Day()
                {
                    Title = "سه‌شنبه",
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "سبزیجات با فیله",
                        Groceries = new List<Grocery>()
                    {
                        new Grocery()
                        {
                            Name = "فیله",
                            Amount = "ربع کیلو"
                        }
                    }
                    }
                },
                Wednesday = new Day()
                {
                    Title = "چهار‌شنبه",
                    Dinner = new Meal()
                    {
                        Title = "شام",
                        FoodName = "املت",
                    }
                },
            };

        WeeksList.Add(FirstWeek);
        WeeksList.Add(SecondWeek);
        WeeksListIterable = WeeksList;
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    // 	await base.OnAfterRenderAsync();
    // }

    public void passingData(int weekId, Day day, bool isAddMeal, Meal? meal = null)
    {
        WeekId = weekId;
        DayModelTitle = day.Title;
        IsForAdd = isAddMeal;
        CurrentColor = day.color;

        if (IsForAdd)
        {
            MealModel = new Meal();
            GroceryModel = new Grocery();
        }
        else
        {
            MealModel = new Meal()
                {
                    Title = meal.Title,
                    FoodName = meal.FoodName,
                    Groceries = meal.Groceries != null ? new List<Grocery>
            (meal.Groceries) : null,
                };
        }
    }

    public void passingMeal(Meal meal)
    {
        MealModel = new Meal()
            {
                Title = meal.Title,
            };
    }

    private void OnEditGeroceries(Meal meal)
    {
        meal.GroceryEditable = !meal.GroceryEditable;
        IsDataPassed = !meal.GroceryEditable;
    }

    // public async Task OnGroceryDeleted(Meal meal, Grocery groc)
    // {
    // 	meal.Groceries.Remove(groc);
    // }


    public IEnumerable<Meal> GetBlankMeals()
    {
        IEnumerable<Meal> list = new List<Meal>();

        if (WeekId != null && DayModelTitle != null)
        {
            list = WeeksListIterable.FirstOrDefault(w => w.Id == WeekId).GetDays().FirstOrDefault(d => d.Title == DayModelTitle).GetMeals();

        }

        list = list.Where(m => m.FoodName == null).ToList();

        return list;

    }

    public async Task OnNewGroceryAdded(bool isSubmitNeeded = false)
    {
        if (MealModel.Groceries == null)
            MealModel.Groceries = new List<Grocery>
                ();

        MealModel.Groceries.Add(GroceryModel);
        GroceryModel = new Grocery();

        if (isSubmitNeeded)
        {
            OnNewGrocerySubmitet();
        }
    }

    public async Task OnNewMealSubmitet()
    {
        var meal = WeeksListIterable.FirstOrDefault(w => w.Id == WeekId).GetDays().FirstOrDefault(d => d.Title == DayModelTitle).GetMeals().FirstOrDefault(m => m.Title == MealModel.Title);

        meal.FoodName = MealModel.FoodName;
        if (MealModel.Groceries != null)
        {
            meal.Groceries = MealModel.Groceries;
        }
    }

    public async Task OnNewGrocerySubmitet()
    {
        var meal = WeeksListIterable.FirstOrDefault(w => w.Id == WeekId).GetDays().FirstOrDefault(d => d.Title == DayModelTitle).GetMeals().FirstOrDefault(m => m.Title == MealModel.Title);

        if (MealModel.Groceries != null)
        {
            meal.Groceries = MealModel.Groceries;
        }
    }

    public async Task OnDeleteMeal()
    {
        var meal = WeeksListIterable.FirstOrDefault(w => w.Id == WeekId).GetDays().FirstOrDefault(d => d.Title == DayModelTitle).GetMeals().FirstOrDefault(m => m.Title == MealModel.Title);

        meal.FoodName = null;
        meal.Groceries = new List<Grocery>
            ();
    }
}
