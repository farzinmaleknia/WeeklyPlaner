@page "/"

@inject IJSRuntime JSRuntime
@inject HttpClient http



<div class="container-fluid">
    <div class="row bg-light-subtle">
        <button class="btn btn-warning" @onclick="onClearLocalStorage">clear</button>

        <Weeks Models="Models" WeeksList="WeeksList" OnModelsChange="OnModelsChange" />

        <Foods FoodList="FoodList" Models="Models" OnFoodListChange="OnFoodListChange" OnModelsChange="OnModelsChange" />

    </div>
</div>

<Modals FoodList="FoodList" Models="Models" WeeksList="WeeksList" OnModelsChange="OnModelsChange" OnWeeksListChange="OnWeeksListChange" OnFoodListChange="OnFoodListChange" />




@code {
    private PersianPhrases PersianPhrases = new PersianPhrases();

    public Models Models { get; set; }

    public List<FoodCategory> FoodList { get; set; }

    public Week FirstWeek { get; set; }
    public Week SecondWeek { get; set; }
    public List<Week> WeeksList { get; set; }

    public DateTime CurrentTime { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Models = new Models();

        FirstWeek = new Week();
        WeeksList = new List<Week>();

        FoodList = new List<FoodCategory>();

        CurrentTime = DateTime.Now;

        await BindData();

        if(WeeksList.Count == 0)
        {
            var responceWeekEmpty = await http.GetStringAsync("/sample-data/Weeks.json");

            WeeksList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Week>>(responceWeekEmpty);

            WeeksList[0].StartDate = CurrentTime;

            // var responceWeekSampleData = await http.GetStringAsync("/sample-data/WeeksSampleData.json");

            // WeeksList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Week>>(responceWeekSampleData);

        }


        if (FoodList.Count == 0)
        {

            var responce = await http.GetStringAsync("/sample-data/foods.json");

            FoodList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FoodCategory>>(responce);

        }

        await CalculateTime();
    }

    private async Task CalculateTime()
    {
        var jj = CurrentTime.AddDays(10);
        Console.WriteLine(jj.DayOfWeek);

        if(jj.Day - CurrentTime.Day > 6)
        {
            var startTime = jj;
            while (startTime.DayOfWeek.ToString() != "Wednesday")
            {
                startTime = startTime.AddDays(-1);
            }

            Console.WriteLine( $"after {startTime.DayOfWeek}");
        }

    }

    public async Task onClearLocalStorage()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.clear");
        StateHasChanged();
    }

    public async Task BindData()
    {

        var responceWeek = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "WeeksList");
        if(responceWeek != null)
        {
            WeeksList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Week>>(responceWeek);
        }

        var responceFood = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "FoodList");
        if(responceFood != null)
        {
            FoodList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FoodCategory>>(responceFood);
        }
        
    }


    public void OnModelsChange(Models models)
    {
        Models = models;
    }

    public async Task OnWeeksListChange(List<Week> list)
    {
        WeeksList = list;

        var WeeksListString = Newtonsoft.Json.JsonConvert.SerializeObject(WeeksList);
        Console.WriteLine(WeeksListString);
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "WeeksList");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "WeeksList", WeeksListString);
    }

    public async Task OnFoodListChange(List<FoodCategory> list)
    {
        FoodList = list;

        var FoodListString = Newtonsoft.Json.JsonConvert.SerializeObject(FoodList);
        Console.WriteLine(FoodListString);
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "FoodList");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "FoodList", FoodListString);
    }
}
