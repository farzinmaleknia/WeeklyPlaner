@page "/"

@using WeeklyPlaner.Models

<div class="container-fluid">
	<div class="row">
		@foreach (var week in WeeksListIterable)
		{
			int colorCounter = 0;
			
			foreach (var day in week.GetDays())
			{

				bool isCreateBtnNeeded = false;

				<div class="col-12  padding-x-0">
					<div class="card days">
						<span class="card-img-top my-bg-@(week.Colors[colorCounter]) text-center f-size36 days-title">@(day.Title)</span>
						<div class="card-body padding-x-0">
							<div class="list-group list-group-flush" >
								<div class="list-group-item padding-x-0">
									@foreach (var meal in day.GetMeals())
									{

										if (meal.FoodName != null)
										{
											<div class="card">
												<button class="card-img-top bg-light text-center f-size28 rounded border-0" data-bs-toggle="collapse" href="#dinnerBody" aria-expanded="true" aria-controls="dinnerBody">@(meal.Title)</button>
												<div id="dinnerBody" class="collapse show">
													<div class="card-body bg-light">
														<div class="row mx-auto">
															<div class="col-6 padding-x-0">
																<button class="btn btn-sm my-bg-@(colorCounter < week.Colors.Count() - 1 ? week.Colors[colorCounter + 1] : week.Colors[(colorCounter + 1) - week.Colors.Count()]) m-auto width-98 bootstrap-buttons food-name" 
																		@onclick="() => passingDay(day, false, meal)" 
																		data-bs-toggle="modal" data-bs-target="#addMealModal"
																>
																		@(meal.FoodName)
																</button>
															</div> 
															<div class="col-6 padding-x-0">
																<button class="btn btn-sm my-bg-@(colorCounter < week.Colors.Count() - 2 ? week.Colors[colorCounter + 2] : week.Colors[(colorCounter + 2) - week.Colors.Count()]) text-white m-auto width-98 bootstrap-buttons">اقلام خرید</button>
															</div> 
															<div class="col-12 f-size18 pt-3">
																@if (meal.Groceries != null)
																{
																	foreach (var groc in meal.Groceries)
																	{
																		<div class="d-flex justify-content-between mb-1">
																			<div>
																				<button type="button" class="btn btn-outline-danger  grocery-del-btn" @onclick="() => OnGroceryDeleted(meal, groc)">-</button>
																			</div>
																			<div>
																				@(groc.Name)
																			</div>
																			<div>
																				@(groc.Amount)
																			</div>
																		</div>
																	
																	}
																}
															</div>
														</div>
													</div>
												</div>
											</div>
										}
										else
										{
											isCreateBtnNeeded = true;
										}
									}
								</div>
							</div>

							@if (isCreateBtnNeeded)
							{
								<div class="d-flex justify-content-center">
									<button class="btn my-bg-@(week.Colors[colorCounter]) new-meal-buttons" data-bs-toggle="modal" data-bs-target="#addMealModal" @onclick="() => passingDay(day, true)">
										وعده جدید
									</button>
								</div>
							}


						</div>
					</div>
				</div>


				if (colorCounter < week.Colors.Count() - 3)
				{
					colorCounter = colorCounter + 3;
				}
				else
				{
					colorCounter = (colorCounter + 3) - week.Colors.Count();
				}
			}
			
		}
	</div>
</div>


<!-- Modal -->
<div class="modal fade" id="addMealModal" tabindex="-1" aria-labelledby="addMealModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title text-primary fs-5" id="addMealModalLabel">وعده جدید اضافه کن</h1>
				<button type="button" class="btn-close m-right-auto" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<EditForm Model="MealModel" OnSubmit="OnNewMealSubmitet">

				<div class="modal-body">
					<div class="mb-3 d-flex justify-content-between">
						<div class="btn-group">

							<button class="btn btn-outline-primary btn-sm dropdown-toggle meal-dropdown-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
								انتخاب وعده
							</button>

							<ul class="dropdown-menu">
								@foreach (var meal in GetBlankMeals())
								{
									<li><a class="dropdown-item" @onclick="() => passingMeal(meal)">@(meal.Title)</a></li>
                                }
							</ul>
						</div>
						<div>
							@if(MealModel.Title != null)
							{
								<p>@(MealModel.Title)</p>
							}

						</div>
					</div>
					<hr />
					<div class="mb-3">
						<label for="foodName" class="form-label">نام غذا</label>
						<InputText id="foodName" class="form-control" @bind-Value="MealModel.FoodName" />
					</div>
					<hr />
					<div class="mb-3">
						<label for="groceryName" class="form-label">نام اقلام</label>
						<InputText id="groceryName" class="form-control" @bind-Value="GroceryModel.Name" />
					</div>
					<div class="mb-3 d-flex justify-content-between">
						<div>
							<label for="groceryAmount" class="form-label">مقدار</label>
							<InputText id="groceryAmount" class="form-control" @bind-Value="GroceryModel.Amount" />
						</div>
						<div>
							<button type="button" class="btn btn-outline-primary  grocery-add-btn" @onclick="OnNewGrocerySubmitet">+</button>
						</div>
					</div>
					@if (MealModel.Groceries != null)
					{
						foreach (var groc in MealModel.Groceries)
						{
							<div class="d-flex justify-content-between">
								<div>
									@(groc.Name)
								</div>
								<div>
									@(groc.Amount)
								</div>
							</div>

						}
					}
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-outline-danger bootstrap-buttons" data-bs-dismiss="modal">انصراف</button>
					<button type="submit" class="btn btn-primary bootstrap-buttons" data-bs-dismiss="modal">ثبت</button>
				</div>

			</EditForm>
		</div>
	</div>
</div>



@code{
	public Week FirstWeek { get; set; } 
	public List<Week> WeeksList { get; set; }
	public IEnumerable<Week> WeeksListIterable { get; set; }

	public Day DayModel { get; set;}

	public Meal MealModel { get; set; }

	public Grocery GroceryModel { get; set; }


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		FirstWeek = new Week();
		WeeksList = new List<Week>();
		WeeksListIterable = new List<Week>();

		DayModel = new Day();

		MealModel = new Meal();

		GroceryModel = new Grocery();


		FirstWeek = new Week()
		{
			Thursday = new Day()
			{
				Title = "پنج شنبه",
				Lunch = new Meal()
				{
					Title = "ناهار",
					FoodName = "آبگوشت",
				},
				Dinner = new Meal()
				{
					Title = "شام",
					FoodName = "قورمه",
					Groceries = new List<Grocery>()
					{
						new Grocery()
						{
							Name = "پیاز",
							Amount = "یک کیلو"
						},
						new Grocery()
						{
							Name = "سیب زمینی",
							Amount = "یک کیلو"
						},
						new Grocery()
						{
							Name = "قارچ",
							Amount = "نیم کیلو"
						}
					}
				}
			},
			Friday = new Day()
			{
				Title = "جمعه",
				Braekfast = new Meal()
				{
					Title = "صبحانه",
					FoodName = "حلیم",

				},
				Lunch = new Meal()
				{
					Title = "ناهار",
					FoodName = "ته چین",
					Groceries = new List<Grocery>()
					{
						new Grocery()
						{
							Name = "مرغ",
							Amount = "نیم کیلو"
						}
					}
				},
				Dinner = new Meal()
				{
					Title = "شام",
					FoodName = "سوپ ورمیشل",
					Groceries = new List<Grocery>()
					{
						new Grocery()
						{
							Name = "قارچ",
							Amount = "نیم کیلو"
						}
					}
				}
			},
			Saturday = new Day()
			{
				Title = "شنبه",
				Dinner = new Meal()
				{
					Title = "شام",
					FoodName = "کباب شامی",
					Groceries = new List<Grocery>()
					{
						new Grocery()
						{
							Name = "سیب زمینی",
							Amount = "ربع کیلو"
						}
					}
				}
			},
			Sunday = new Day()
			{
				Title = "یکشنبه",
			},
			Monday = new Day()
			{
				Title = "دوشنبه",
				Dinner = new Meal()
				{
					Title = "شام",
					FoodName = "ماکارانی",
					Groceries = new List<Grocery>()
					{
						new Grocery()
						{
							Name = "رب گوجه",
							Amount = "یک شیشه"
						}
					}
				}
			},
			Tuesday = new Day()
			{
				Title = "سه شنبه",
			},
			Wednesday = new Day()
			{
				Title = "چهار شنبه",
				Dinner = new Meal()
				{
					Title = "شام",
					FoodName = "الویه",
					Groceries = new List<Grocery>()
					{
						new Grocery()
						{
							Name = "مایونز",
							Amount = "یک شیشه"
						}
					}
				}
			},
		};

		WeeksList.Add(FirstWeek);
		WeeksListIterable = WeeksList;
	}

	public async Task OnNewMealSubmitet()
	{
		var dayModelMeal = DayModel.GetMeals().FirstOrDefault(m => m.Title == MealModel.Title);

		dayModelMeal.FoodName = MealModel.FoodName;
		if (MealModel.Groceries != null)
		{
			dayModelMeal.Groceries = MealModel.Groceries;
		}
	}

	public async Task OnNewGrocerySubmitet() 
	{
		if (MealModel.Groceries == null)
			MealModel.Groceries = new List<Grocery>();

		MealModel.Groceries.Add(GroceryModel);
		GroceryModel = new Grocery();
	}

	public async Task OnGroceryDeleted(Meal meal, Grocery groc)
	{
		meal.Groceries.Remove(groc);
	}

	public void passingDay(Day day, bool isAddMeal, Meal? meal = null)
	{
		DayModel = day;

		if(isAddMeal)
		{
			MealModel = new Meal();
			GroceryModel = new Grocery();			
		}
		else
		{
			MealModel.Title = meal.Title;
			MealModel.FoodName = meal.FoodName;
			MealModel.Groceries = meal.Groceries;
		}
	}

	public void passingMeal(Meal meal)
	{
		MealModel = new Meal()
		{
			Title = meal.Title,
		};
	}

	public IEnumerable<Meal> GetBlankMeals()
	{
		var list = DayModel.GetMeals();

		list = list.Where(m => m.FoodName == null).ToList();

		return list;

	}
}
