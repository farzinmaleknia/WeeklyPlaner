@page "/"

@using WeeklyPlaner.Models
@using WeeklyPlaner.Shared.Components

<div class="container-fluid">
    <div class="row bg-light-subtle">

        @if (false)
        {


        <div id="WeekCarousel" class="carousel slide">
            <div class="carousel-inner">

                @foreach (var week in WeeksListIterable)
                {
                    if (FirstRender)
                    {
                        ColorCounter = Random.Next(0, week.Colors.Count());
                        FirstRender = false;
                    }

                    <div class="carousel-item @(week.Title == "هفته کنونی"? "active": "") col-12 padding-x-0">
                        <div class="mb-3">
                            <div class="my-2 d-flex justify-content-between">
                                <button class="border-0  " type="button" data-bs-target="#WeekCarousel" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>

                                <span class=" f-size36 weeks-title just-bg-@(week.Colors[Random.Next(0, week.Colors.Count())]) text-center">@(week.Title)</span>

                                <button class="border-0 " type="button" data-bs-target="#WeekCarousel" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon text-dark " aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                            </div>

                            @foreach (var day in week.GetDays())
                            {
                                day.color = week.Colors[ColorCounter];
                                bool isCreateBtnNeeded = false;

                                <div class="col-12  padding-x-0">
                                    <div class="card days">
                                        <span class="card-img-top just-bg-@(day.color) text-center f-size36 days-title  my-sticky">@(day.Title)</span>
                                        <div class="card-body padding-x-0">
                                            <div class="list-group list-group-flush">
                                                <div class="list-group-item padding-x-0">
                                                    @foreach (var meal in day.GetMeals())
                                                    {
                                                        if (meal.Food.Name != null)
                                                        {
                                                            <div class="card">
                                                                <div class="card-img-top bg-light days-img-top rounded border-0 d-flex justify-content-between">
                                                                    <span class="f-size36 meal-title" data-bs-toggle="collapse" href="#dinnerBody" aria-expanded="true" aria-controls="dinnerBody">@(meal.Title)</span>
                                                                    <button class="btn my-bg-@(day.color) btn-sm meal-del-btn" @onclick="() =>  passingData(week.Id, day, false, meal)" data-bs-toggle="modal" data-bs-target="#DelConfirmMealModal">
                                                                        <i class="fa fa-times" aria-hidden="true"></i>
                                                                    </button>
                                                                </div>
                                                                <div id="dinnerBody" class="collapse show">
                                                                    <div class="card-body bg-light padding-t-5">
                                                                        <div class="row mx-auto">
                                                                            <div class="col-10 padding-x-0">
                                                                                <button class="btn btn-sm my-bg-@(day.color)-outline m-auto width-98 bootstrap-buttons food-name f-size24 "
                                                                                        @onclick="() => passingData(week.Id, day, false, meal)"
                                                                                        data-bs-toggle="modal" data-bs-target="#addEditMealModal">
                                                                                    @(meal.Food.Name)
                                                                                </button>
                                                                            </div>
                                                                            <div class="col-2 padding-x-0">
                                                                                <button class="btn btn-sm my-bg-@(day.color)-outline text-white m-auto width-98 grocery-btn"
                                                                                        @onclick="() => OnEditGeroceries(meal)">
                                                                                    <i class="fa fa-cart-plus" aria-hidden="true"></i>
                                                                                </button>
                                                                            </div>


                                                                            @if (meal.GroceryEditable)
                                                                            {
                                                                                if (!IsDataPassed)
                                                                                {
                                                                                    passingData(week.Id, day, false, meal);
                                                                                    IsDataPassed = true;
                                                                                }

                                                                                <div class="col-12 mt-3 padding-x-0">
                                                                                    <AddGrocery GroceryModel="GroceryModel" IsSubmitNeeded="true" CurrentColor="@(CurrentColor)" ValueChangedEventHandler="OnNewGroceryAdded" />
                                                                                </div>
                                                                            }


                                                                            <div class="col-12 f-size18 padding-x-0 pt-3">
                                                                                @if (meal.Groceries != null)
                                                                                {
                                                                                    <GroceriesList MealModel="meal" />
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            isCreateBtnNeeded = true;
                                                        }
                                                    }
                                                </div>
                                            </div>

                                            @if (isCreateBtnNeeded)
                                            {
                                                <div class="d-flex justify-content-center">
                                                    <button class="btn my-bg-@(day.color) new-meal-buttons" data-bs-toggle="modal" data-bs-target="#addEditMealModal" @onclick="() => passingData(week.Id, day, true)">
                                                        وعده جدید
                                                    </button>
                                                </div>
                                            }


                                        </div>
                                    </div>
                                </div>


                                if (ColorCounter < week.Colors.Count() - 1)
                                {
                                    ColorCounter = ColorCounter + 1;
                                }
                                else
                                {
                                    ColorCounter = (ColorCounter + 1) - week.Colors.Count();
                                }
                            }
                        </div>
                    </div>

                }
            </div>
        </div>

        }

        <div class="mb-3">
            <div>
                <span class=" f-size36 food-title just-bg-blue text-center">غذاها</span>
            </div>
            <div class="card mb-5">
                <div class="card-body">
                    <EditForm Model="CategoryModel" OnSubmit="OnNewCategorySubmited" >
                        <h5>افزودن دسته</h5>
                        <div class="d-flex justify-content-between">
                            <div class="mb-2">
                                <InputText id="categoryName" class="form-control" @bind-Value="CategoryModel.Title" placeholder="نام"/>
                            </div>
                            <div>
                                <button type="submit" class="btn my-bg-blue-outline padding-t-10">
                                    <i class="fa fa-plus" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>

            @foreach (var categorty in FoodList)
            {
                <div class="mb-3">
                    <div class="food-category-group d-flex justify-content-start">
                        <span class="category-title f-size28">@(categorty.Title)</span>
                        <button class="btn my-bg-blue-outline border-0" data-bs-toggle="modal" data-bs-target="#addEditFoodModal" @onclick="() => passingCategory(false, categorty)"><i class="fa fa-plus f-size16" aria-hidden="true"></i></button>
                        <button class="btn my-bg-blue-outline border-0" data-bs-toggle="modal" data-bs-target="#addEditCategoryModal" @onclick="() => passingCategory(false, categorty)"><i class="fa fa-pen f-size16" aria-hidden="true"></i></button>
                        <button class="btn my-bg-blue-outline border-0"><i class="fa fa-minus f-size16" aria-hidden="true"></i></button>
                    </div>
                    <div>
                        @foreach (var food in categorty.foods)
                        {
                            <button class="btn my-bg-blue-outline m-1 f-size18" @onclick="() => OnFoodSelected(food)">
                                @(food.Name)
                                <i class="fa fa-times f-size16 food-name-icon" aria-hidden="true"></i>
                            </button>
                        }
                    </div>
                </div>
            }

            <button class="btn my-bg-blue new-meal-buttons" data-bs-toggle="modal" data-bs-target="#addEditCategoryModal" @onclick="() => passingCategory(true)">
                دسته‌ی جدید<i class="fa fa-plus f-size16" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>


<!-- ADD/Edit meal Modal -->
<div class="modal fade" id="addEditMealModal" tabindex="-1" aria-labelledby="addEditMealModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header just-bg-@(CurrentColor)">
                <h1 class="modal-title fs-5" id="addEditMealModalLabel">@(IsForAddMeal ? "وعده جدید رو وارد کن" : "وعده رو تغییر بده")</h1>
                <button type="button" class="btn text-white m-right-auto" data-bs-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            </div>
            <EditForm Model="MealModel" OnSubmit="OnNewMealSubmitet">

                <div class="modal-body">
                    <div class="d-flex justify-content-between">
                        <div class="btn-group">
                            <button class="btn my-bg-@(CurrentColor) btn-sm dropdown-toggle meal-dropdown-btn mb-2 @(!IsForAddMeal ? "disabled" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                انتخاب وعده
                            </button>
                            <ul class="dropdown-menu">
                                @foreach (var meal in GetBlankMeals())
                                {
                                    <li><a class="dropdown-item" @onclick="() => passingMeal(meal)">@(meal.Title)</a></li>
                                }
                            </ul>
                        </div>
                        <div>
                            @if (MealModel.Title != null)
                            {
                                <p class="f-size28">@(MealModel.Title)</p>
                            }
                        </div>
                    </div>
                     
                    <hr style="margin-top: 0;" />

                    @if (MealModel.Food.Name == null)
                    {
                        <div class="modal-food-scrollable">
                            @foreach (var categorty in FoodList)
                            {
                                <div>
                                    <div class="mx-2 mt-3">
                                        <span >@(categorty.Title)</span>
                                    </div>
                                    <div>
                                        @foreach (var food in categorty.foods)
                                        {
                                            <button class="btn my-bg-@(CurrentColor)-outline m-1 f-size18" @onclick="() => OnFoodSelected(food)">@(food.Name)</button>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        
                    }
                    else
                    {
                            <div class="btn-group dir-ltr" role="group" aria-label="foodModelName">
                                <button type="button" class="btn my-bg-@(CurrentColor)" @onclick="() => OnFoodDiselected()">
                                    <i class="fa fa-times  f-size16" aria-hidden="true"></i>
                                </button>
                                <span class="btn just-bg-@(CurrentColor)">@(MealModel.Food.Name)</span>
                            </div>

                            <hr />

                            <AddGrocery GroceryModel="GroceryModel" IsSubmitNeeded="false" CurrentColor="@(CurrentColor)" ValueChangedEventHandler="OnNewGroceryAdded" />

                            @if (MealModel.Groceries != null)
                            {
                                <GroceriesList MealModel="MealModel" />
                            }
                    }
                </div>
                @if (MealModel.Food.Name != null)
                {
                    <div class="modal-footer">
                        <button type="button" class="btn my-bg-@(CurrentColor)-outline bootstrap-buttons" data-bs-dismiss="modal">انصراف</button>
                        <button type="submit" class="btn my-bg-@(CurrentColor) bootstrap-buttons" data-bs-dismiss="modal">ثبت</button>
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>

<!-- DeleteConfirmation Modal -->
<div class="modal fade" id="DelConfirmMealModal" tabindex="-1" aria-labelledby="DelConfirmMealModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header just-bg-@(CurrentColor)">
                <h1 class="modal-title fs-5" id="DelConfirmMealModalLabel">هشدار!</h1>
                <button type="button" class="btn-close m-right-auto" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <span>آیا از حذف @(MealModel.Food.Name) به عنوان @(MealModel.Title) مطمئن هستید؟</span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn my-bg-@(CurrentColor)-outline bootstrap-buttons" data-bs-dismiss="modal">خیر</button>
                <button class="btn my-bg-@(CurrentColor) bootstrap-buttons" data-bs-dismiss="modal" @onclick="OnDeleteMeal">بلی</button>
            </div>
        </div>
    </div>
</div>

<!-- ADD/Edit Food -->
<div class="modal fade" id="addEditFoodModal" tabindex="-1" aria-labelledby="addEditFoodModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header just-bg-blue">
                <h1 class="modal-title fs-5" id="addEditFoodModalLabel">@(true ? "غذای جدید رو وارد کن" : "غذا رو تغییر بده")</h1>
                <button type="button" class="btn text-white m-right-auto" data-bs-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            </div>
            <EditForm Model="FoodModel" OnSubmit="OnNewFoodSubmited">
                <div class="modal-body">
                    <label for="foodname" class="form-label">نام</label>
                    <InputText id="foodname" class="form-control" @bind-Value=(FoodModel.Name) />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn my-bg-blue-outline bootstrap-buttons" data-bs-dismiss="modal">انصراف</button>
                    @if (true)
                    {
                        <button type="submit" class="btn my-bg-blue bootstrap-buttons">ثبت</button>
                    }
                    else
                    {
                        <button type="submit" class="btn my-bg-blue bootstrap-buttons" data-bs-dismiss="modal">ثبت</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- ADD/Edit Category -->
<div class="modal fade" id="addEditCategoryModal" tabindex="-1" aria-labelledby="addEditCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header just-bg-blue">
                <h1 class="modal-title fs-5" id="addEditCategoryModalLabel">@(IsForAddCat ? "دسته‌ی جدید رو وارد کن" : "دسته رو تغییر بده")</h1>
                <button type="button" class="btn text-white m-right-auto" data-bs-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            </div>
            <EditForm Model="CategoryModel" OnSubmit="OnNewCategorySubmited">
                <div class="modal-body">
                    <label for="categoryname" class="form-label">نام</label>
                    <InputText id="categoryname" class="form-control" @bind-Value=(CategoryModel.Title) />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn my-bg-blue-outline bootstrap-buttons" data-bs-dismiss="modal">انصراف</button>
                    @if (IsForAddCat)
                    {
                        <button type="submit" class="btn my-bg-blue bootstrap-buttons">ثبت</button>
                    }
                    else
                    {
                        <button type="submit" class="btn my-bg-blue bootstrap-buttons" data-bs-dismiss="modal">ثبت</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    public Week FirstWeek { get; set; }
    public Week SecondWeek { get; set; }
    public List<Week> WeeksList { get; set; }
    public IEnumerable<Week> WeeksListIterable { get; set; }

    public List<FoodCategory> FoodList { get; set; }

    public int WeekId { get; set; }

    public string DayModelTitle { get; set; }

    public Meal MealModel { get; set; }

    public Food FoodModel { get; set; }

    public FoodCategory CategoryModel { get; set; }

    public Grocery GroceryModel { get; set; }

    public bool IsDataPassed { get; set; }

    public int ColorCounter { get; set; }

    public string CurrentColor { get; set; }

    public bool FirstRender { get; set; }

    public Random Random { get; set; }

    public bool IsForAddMeal { get; set; }

    public bool IsForAddCat { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        FirstWeek = new Week();
        WeeksList = new List<Week>();
        WeeksListIterable = new List<Week>();

        FoodList = new List<FoodCategory>();

        MealModel = new Meal();

        FoodModel = new Food();

        CategoryModel = new FoodCategory();

        FirstRender = true;

        Random = new Random();

        GroceryModel = new Grocery();

        IsDataPassed = false;


        FirstWeek = new Week()
        {
            Id = 1,
            Title = "هفته کنونی",
            Thursday = new Day()
            {
                Title = "پنج‌شنبه",
                Lunch = new Meal()
                {
                    Title = "ناهار",
                    Food = new Food("آبگوشت"),
                },
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("قورمه"),
                    Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "پیاز",
                    Amount = "یک کیلو"
                },
                new Grocery()
                {
                    Name = "سیب زمینی",
                    Amount = "یک کیلو"
                },
                new Grocery()
                {
                    Name = "قارچ",
                    Amount = "نیم کیلو"
                }
            }
                }
            },
            Friday = new Day()
            {
                Title = "جمعه",
                Braekfast = new Meal()
                {
                    Title = "صبحانه",
                    Food = new Food("حلیم"),

                },
                Lunch = new Meal()
                {
                    Title = "ناهار",
                    Food = new Food("ته چین"),
                    Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "مرغ",
                    Amount = "نیم کیلو"
                }
            }
                },
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("سوپ ورمیشل"),
                    Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "قارچ",
                    Amount = "نیم کیلو"
                }
            }
                }
            },
            Saturday = new Day()
            {
                Title = "شنبه",
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("کباب شامی"),
                    Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "سیب زمینی",
                    Amount = "ربع کیلو"
                }
            }
                }
            },
            Sunday = new Day()
            {
                Title = "یکشنبه",

            },
            Monday = new Day()
            {
                Title = "دوشنبه",
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("ماکارانی"),
                    Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "رب گوجه",
                    Amount = "یک شیشه"
                }
            }
                }
            },
            Tuesday = new Day()
            {
                Title = "سه‌شنبه",

            },
            Wednesday = new Day()
            {
                Title = "چهار‌شنبه",
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("الویه"),
                    Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "مایونز",
                    Amount = "یک شیشه"
                }
            }
                }
            },
        };

        SecondWeek = new Week()
        {
            Id = 2,
            Title = "هفته قبل",
            Thursday = new Day()
            {
                Title = "پنج‌شنبه",
                Lunch = new Meal()
                {
                    Title = "ناهار",
                    Food = new Food("دیزی")
                },
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("دو پیازه"),
                    Groceries = new List<Grocery>()
                    {
                        new Grocery()
                        {
                            Name = "پیاز",
                            Amount = "دو کیلو"
                        },
                        new Grocery()
                        {
                            Name = "سیب زمینی",
                            Amount = "دو کیلو"
                        },
                    }
                }
            },
            Friday = new Day()
            {
                Title = "جمعه",
                Braekfast = new Meal()
                {
                    Title = "صبحانه",
                    Food = new Food("نان و پنیر"),
                    Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "نان بربری کنجدی",
                        Amount = "دو عدد"
                    }
                }
                },
                Lunch = new Meal()
                {
                    Title = "ناهار",
                    Food = new Food("خوراک مرغ"),
                    Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "مرغ",
                        Amount = "دو کیلو"
                    }
                }
                },
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("سوپ مدیترانه"),
                    Groceries = new List<Grocery>()
            {
                new Grocery()
                {
                    Name = "قارچ",
                    Amount = "نیم کیلو"
                },
                new Grocery()
                {
                    Name = "زرشک",
                    Amount = "یک بسته"
                },
            }
                }
            },
            Saturday = new Day()
            {
                Title = "شنبه",

            },
            Sunday = new Day()
            {
                Title = "یکشنبه",
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("خوراک لوبیا"),
                    Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "لوبیا چیتی",
                        Amount = "یک بسته"
                    }
                }
                }
            },
            Monday = new Day()
            {
                Title = "دوشنبه",
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("سبزیجات با فیله"),
                    Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "فیله",
                        Amount = "ربع کیلو"
                    }
                }
                }
            },
            Tuesday = new Day()
            {
                Title = "سه‌شنبه",
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("سبزیجات با فیله"),
                    Groceries = new List<Grocery>()
                {
                    new Grocery()
                    {
                        Name = "فیله",
                        Amount = "ربع کیلو"
                    }
                }
                }
            },
            Wednesday = new Day()
            {
                Title = "چهار‌شنبه",
                Dinner = new Meal()
                {
                    Title = "شام",
                    Food = new Food("املت"),
                }
            },
        };



        FoodList.AddRange(new List<FoodCategory>()
            {
                new FoodCategory(){ Title = "صبحانه", foods = new List<Food>() { new Food("حلیم"), new Food("نان و پنیر"), new Food("صبحانه انگلیسی"), new Food("سوسیس تخم مرغ"), }, }, 
                new FoodCategory(){ Title = "غذاهای نونی", foods = new List<Food>() { new Food("آبگوشت"), new Food("کباب شامی"), new Food("الویه"), new Food("دیزی"), new Food("دو پیازه"), new Food("املت")} },
                new FoodCategory(){ Title= "غذاهای برنجی", foods = new List<Food>() { new Food("قرمه سبزی"), new Food("ته چین مرغ"), new Food("خوراک مرغ"), new Food("خورشت بامیه"), new Food("خورشت قیمه"), new Food("خورشت کرفس"), new Food("سبزی پلو با تن ماهی"), } },
                new FoodCategory(){ Title = "غذاهای حبوباتی", foods = new List<Food>() { new Food("لوبیا چیتی"), new Food("عدسی"), } },
                new FoodCategory(){ Title = "غذاهای نشاسته ای", foods = new List<Food>() { new Food("ماکارانی"), } },
                new FoodCategory(){ Title = "غذاهای سبزیجاتی", foods = new List<Food>() { new Food("سبزیجات با فیله"), new Food("سبزیجات با استیک"), } }, 
                new FoodCategory(){ Title = "غذاهای فوری", foods = new List<Food>() { new Food("ساندویچ مرغ"), new Food("ساندویچ تن ماهی و سیبزمینی"), new Food("بندری"), } },
                new FoodCategory(){ Title = "غذاهای کناری", foods = new List<Food>() { new Food("سوپ ورمیشل"), new Food("سوپ مدیترانه"), new Food("سالاد شیرازی"), new Food("سالاد فصل"), new Food("سالاد سزار"), new Food("سالاد تن ماهی"), new Food("سالاد تن پیاز"), } },
            }
        );

        foreach (var category in FoodList)
        {
            foreach (var food in category.GetFoods())
            {
                food.Category = category.Title;
            }
        }


        WeeksList.Add(FirstWeek);
        WeeksList.Add(SecondWeek);
        WeeksListIterable = WeeksList;
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    // 	await base.OnAfterRenderAsync();
    // }

    public void passingData(int weekId, Day day, bool isAddMeal, Meal? meal = null)
    {
        WeekId = weekId;
        DayModelTitle = day.Title;
        IsForAddMeal = isAddMeal;
        CurrentColor = day.color;

        if (IsForAddMeal)
        {
            MealModel = new Meal();
            GroceryModel = new Grocery();
        }
        else
        {
            MealModel = new Meal()
            {
                Title = meal.Title,
                Food = new Food(meal.Food.Name),
                Groceries = meal.Groceries != null ? new List<Grocery>(meal.Groceries) : null,
            };
        }
    }

    public void passingMeal(Meal meal)
    {
        MealModel = new Meal()
            {
                Title = meal.Title,
            };
    }

    private void OnEditGeroceries(Meal meal)
    {
        meal.GroceryEditable = !meal.GroceryEditable;
        IsDataPassed = !meal.GroceryEditable;
    }

    // public async Task OnGroceryDeleted(Meal meal, Grocery groc)
    // {
    // 	meal.Groceries.Remove(groc);
    // }


    public IEnumerable<Meal> GetBlankMeals()
    {
        IEnumerable<Meal> list = new List<Meal>();

        if (WeekId != null && DayModelTitle != null)
        {
            list = WeeksListIterable.FirstOrDefault(w => w.Id == WeekId).GetDays().FirstOrDefault(d => d.Title == DayModelTitle).GetMeals();

        }

        list = list.Where(m => m.Food.Name == null).ToList();

        return list;

    }

    public async Task passingCategory(bool isForAddCat, FoodCategory category = null )
    {
        if(isForAddCat)
        {
            CategoryModel = new FoodCategory();

        }
        else
        {
            var lst = new List<Food>();
            lst.AddRange(category.foods);
            CategoryModel = new FoodCategory()
            {
                Id = category.Id,
                Title = category.Title,

                foods = lst,
            };
        }
        IsForAddCat = isForAddCat;
    }

    public async Task OnNewFoodSubmited()
    {
        var category = FoodList.FirstOrDefault(c => c.Title == CategoryModel.Title);
        category.foods.Add(FoodModel);

        FoodModel = new Food();
    }

    public async Task OnNewCategorySubmited()
    {
        if (IsForAddCat)
        {
            FoodList.Add(new FoodCategory()
            {
                Title = CategoryModel.Title,
            });

        }
        else
        {
            var category = FoodList.FirstOrDefault(c => c.Id == CategoryModel.Id);
            category.Title = CategoryModel.Title;
        }
        CategoryModel = new FoodCategory();
    }

    public async Task OnCategorySelected(string category)
    {
        FoodModel.Category = category;
    }

    public async Task OnFoodSelected(Food food)
    {
        MealModel.Food = new Food(food.Name);
    }

    public async Task OnFoodDiselected()
    {
        MealModel.Food = new Food();
    }

    public async Task OnNewGroceryAdded(bool isSubmitNeeded = false)
    {
        if (MealModel.Groceries == null)
            MealModel.Groceries = new List<Grocery>
                ();

        MealModel.Groceries.Add(GroceryModel);
        GroceryModel = new Grocery();

        if (isSubmitNeeded)
        {
            OnNewGrocerySubmitet();
        }
    }

    public async Task OnNewMealSubmitet()
    {
        var meal = WeeksListIterable.FirstOrDefault(w => w.Id == WeekId).GetDays().FirstOrDefault(d => d.Title == DayModelTitle).GetMeals().FirstOrDefault(m => m.Title == MealModel.Title);

        meal.Food = MealModel.Food;
        if (MealModel.Groceries != null)
        {
            meal.Groceries = MealModel.Groceries;
        }
    }

    public async Task OnNewGrocerySubmitet()
    {
        var meal = WeeksListIterable.FirstOrDefault(w => w.Id == WeekId).GetDays().FirstOrDefault(d => d.Title == DayModelTitle).GetMeals().FirstOrDefault(m => m.Title == MealModel.Title);

        if (MealModel.Groceries != null)
        {
            meal.Groceries = MealModel.Groceries;
        }
    }

    public async Task OnDeleteMeal()
    {
        var meal = WeeksListIterable.FirstOrDefault(w => w.Id == WeekId).GetDays().FirstOrDefault(d => d.Title == DayModelTitle).GetMeals().FirstOrDefault(m => m.Title == MealModel.Title);

        meal.Food = new Food();
        meal.Groceries = new List<Grocery>();
    }
}
