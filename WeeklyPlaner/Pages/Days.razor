@inject IJSRuntime JSRuntime

<div class="grid-item padding-x-0">
    <div class="content">
        <div class="card days my-border-@(Week.Color)">
            <span class="card-img-top just-bg-@(Week.Color) text-center f-size36 days-title  my-sticky" data-bs-toggle="collapse" @onclick="() =>  OnCollapsDay()" href="#@($"{Week.Id}{Day.Id}")" aria-expanded="true" aria-controls="@($"{Week.Id}{Day.Id}")">@(Day.Title)</span>
            <div id="@($"{Week.Id}{Day.Id}")" class="collapse @(!Day.IsDayCollapsed ? "show" : "")">
                <div class="card-body padding-x-0">
                    @if(Day.IsDayBlank)
                    {
                        <span class="d-flex justify-content-center padding-x-20">
                            @(Language.BlankDay)
                        </span>
                    }
                    else
                    {
                        <div class="list-group list-group-flush">
                            <div class="list-group-item padding-x-0">
                                @foreach (var meal in Day.GetMeals())
                                {
                                    if (meal.Foods.Count > 0)
                                    {
                                        <Meals Models="Models" Week="Week" Language="Language" Day="Day" Meal="meal" OnWeeksListChangeDays="OnWeeksListChangeDays" OnModelsChangeDays="OnModelsChangeDays" />
                                    }
                                    else if (!meal.IsMealPassed)
                                    {
                                        Day.IsCreateBtnNeeded = true;
                                    }
                                }
                            </div>
                        </div>

                        @if (Day.IsCreateBtnNeeded && !Day.IsDayPassed)
                        {
                            <div class="d-flex justify-content-center">
                                <button class="btn my-bg-@(Week.Color) new-meal-buttons" data-bs-toggle="modal" data-bs-target="#addEditMealModal" @onclick="() => passingData()">
                                    @(Language.NewMeal)
                                </button>
                            </div>
                        }
                    }
                </div>        
            </div>
        </div>
    </div>
</div>




@code {

    [Parameter, EditorRequired]
    public Language Language { get; set; }

    [Parameter]
    public Models Models { get; set; }

    [Parameter]
    public Week Week { get; set; }

    [Parameter]
    public Day Day { get; set; }

    [Parameter]
    public EventCallback<Models> OnModelsChangeWeeks { get; set; }

    [Parameter]
    public EventCallback OnWeeksListChangeWeeks { get; set; }

    public string DayModelTitle { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }



    public async Task passingData()
    {
        Models.IsForAddMeal = true;
        Models.WeekId = Week.Id;
        Models.DayModel = new Day(Language.SelectedLang)
        {
            Title = Day.Title,
            color = Week.Color,
        };

        Models.MealModel = new Meal();
        Models.GroceryModel = new Grocery();



        await OnModelsChangeDays();
    }

    private async Task OnCollapsDay()
    {
        Day.IsDayCollapsed = !Day.IsDayCollapsed;

        await OnWeeksListChangeDays();
    }

    public async Task OnModelsChangeDays(Models models = null)
    {

        if (models != null)
            Models = models;

        await OnModelsChangeWeeks.InvokeAsync(Models);
    }

    public async Task OnWeeksListChangeDays()
    {

        //await JSRuntime.InvokeVoidAsync("resizeAllGridItems");

        await OnWeeksListChangeWeeks.InvokeAsync();
    }

}
